Search.setIndex({"alltitles": {"Args:": [[6, "args"], [6, "id9"]], "Argument": [[6, "argument"], [9, "argument"], [9, "id5"]], "Attribtues": [[6, "attribtues"]], "Attribute": [[4, "attribute"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "Module contents": [[3, "module-tests"], [4, "module-treeQuadrature"], [5, "module-treeQuadrature.container_integrators"], [6, "module-treeQuadrature.example_problems"], [7, "module-treeQuadrature.gaussian_process"], [8, "module-treeQuadrature.integrators"], [9, "module-treeQuadrature.samplers"], [10, "module-treeQuadrature.splits"], [11, "module-treeQuadrature.trees"]], "Parameter": [[4, "parameter"], [6, "parameter"], [6, "id14"]], "Submodules": [[3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"]], "Subpackages": [[4, "subpackages"]], "Usage": [[4, "usage"], [4, "id1"]], "Welcome to treeQuadrature\u2019s documentation!": [[0, null]], "setup module": [[2, null]], "tests package": [[3, null]], "tests.conftest module": [[3, "module-tests.conftest"]], "tests.test_container module": [[3, "module-tests.test_container"]], "tests.test_distributions module": [[3, "module-tests.test_distributions"]], "tests.test_integrators module": [[3, "module-tests.test_integrators"]], "treeQuadrature": [[1, null]], "treeQuadrature package": [[4, null]], "treeQuadrature.compare_integrators module": [[4, "module-treeQuadrature.compare_integrators"]], "treeQuadrature.container module": [[4, "module-treeQuadrature.container"]], "treeQuadrature.container_integrators package": [[5, null]], "treeQuadrature.container_integrators.base_class module": [[5, "module-treeQuadrature.container_integrators.base_class"]], "treeQuadrature.container_integrators.constant_integral module": [[5, "module-treeQuadrature.container_integrators.constant_integral"]], "treeQuadrature.container_integrators.gp_integral module": [[5, "module-treeQuadrature.container_integrators.gp_integral"]], "treeQuadrature.container_integrators.monte_carlo_integral module": [[5, "module-treeQuadrature.container_integrators.monte_carlo_integral"]], "treeQuadrature.example_problems package": [[6, null]], "treeQuadrature.example_problems.base_class module": [[6, "module-treeQuadrature.example_problems.base_class"]], "treeQuadrature.example_problems.bayes_problems module": [[6, "module-treeQuadrature.example_problems.bayes_problems"]], "treeQuadrature.example_problems.complex_problems module": [[6, "module-treeQuadrature.example_problems.complex_problems"]], "treeQuadrature.example_problems.distributions module": [[6, "module-treeQuadrature.example_problems.distributions"]], "treeQuadrature.example_problems.simple_problems module": [[6, "module-treeQuadrature.example_problems.simple_problems"]], "treeQuadrature.gaussian_process package": [[7, null]], "treeQuadrature.gaussian_process.diagnosis module": [[7, "module-treeQuadrature.gaussian_process.diagnosis"]], "treeQuadrature.gaussian_process.fit_gp module": [[7, "module-treeQuadrature.gaussian_process.fit_gp"]], "treeQuadrature.gaussian_process.kernel_integration module": [[7, "module-treeQuadrature.gaussian_process.kernel_integration"]], "treeQuadrature.gaussian_process.kernels module": [[7, "module-treeQuadrature.gaussian_process.kernels"]], "treeQuadrature.gaussian_process.scorings module": [[7, "module-treeQuadrature.gaussian_process.scorings"]], "treeQuadrature.gaussian_process.visualisation module": [[7, "module-treeQuadrature.gaussian_process.visualisation"]], "treeQuadrature.integrators package": [[8, null]], "treeQuadrature.integrators.base_class module": [[8, "module-treeQuadrature.integrators.base_class"]], "treeQuadrature.integrators.batch_gp_integrator module": [[8, "module-treeQuadrature.integrators.batch_gp_integrator"]], "treeQuadrature.integrators.bmc_integrator module": [[8, "module-treeQuadrature.integrators.bmc_integrator"]], "treeQuadrature.integrators.distributed_gp_integrator module": [[8, "module-treeQuadrature.integrators.distributed_gp_integrator"]], "treeQuadrature.integrators.distributed_tree_integrator module": [[8, "module-treeQuadrature.integrators.distributed_tree_integrator"]], "treeQuadrature.integrators.smc_integrator module": [[8, "module-treeQuadrature.integrators.smc_integrator"]], "treeQuadrature.integrators.tree_integrator module": [[8, "module-treeQuadrature.integrators.tree_integrator"]], "treeQuadrature.integrators.vegas_integrator module": [[8, "module-treeQuadrature.integrators.vegas_integrator"]], "treeQuadrature.queues module": [[4, "module-treeQuadrature.queues"]], "treeQuadrature.samplers package": [[9, null]], "treeQuadrature.samplers.base_class module": [[9, "module-treeQuadrature.samplers.base_class"]], "treeQuadrature.samplers.combined_samplers module": [[9, "module-treeQuadrature.samplers.combined_samplers"]], "treeQuadrature.samplers.importance_sampler module": [[9, "module-treeQuadrature.samplers.importance_sampler"]], "treeQuadrature.samplers.low_discrepancy_samplers module": [[9, "module-treeQuadrature.samplers.low_discrepancy_samplers"]], "treeQuadrature.samplers.mcmc_sampler module": [[9, "module-treeQuadrature.samplers.mcmc_sampler"]], "treeQuadrature.samplers.mixed_sampler module": [[9, "module-treeQuadrature.samplers.mixed_sampler"]], "treeQuadrature.samplers.stratified_sampler module": [[9, "module-treeQuadrature.samplers.stratified_sampler"]], "treeQuadrature.samplers.uniform_sampler module": [[9, "module-treeQuadrature.samplers.uniform_sampler"]], "treeQuadrature.splits package": [[10, null]], "treeQuadrature.splits.base_class module": [[10, "module-treeQuadrature.splits.base_class"]], "treeQuadrature.splits.kd_split module": [[10, "module-treeQuadrature.splits.kd_split"]], "treeQuadrature.splits.min_sse_split module": [[10, "module-treeQuadrature.splits.min_sse_split"]], "treeQuadrature.splits.uniform_split module": [[10, "module-treeQuadrature.splits.uniform_split"]], "treeQuadrature.trees package": [[11, null]], "treeQuadrature.trees.base_class module": [[11, "module-treeQuadrature.trees.base_class"]], "treeQuadrature.trees.limited_sample_tree module": [[11, "module-treeQuadrature.trees.limited_sample_tree"]], "treeQuadrature.trees.simple_tree module": [[11, "module-treeQuadrature.trees.simple_tree"]], "treeQuadrature.trees.weighted_tree module": [[11, "module-treeQuadrature.trees.weighted_tree"]], "treeQuadrature.utils module": [[4, "module-treeQuadrature.utils"]], "treeQuadrature.visualisation module": [[4, "module-treeQuadrature.visualisation"]]}, "docnames": ["index", "modules", "setup", "tests", "treeQuadrature", "treeQuadrature.container_integrators", "treeQuadrature.example_problems", "treeQuadrature.gaussian_process", "treeQuadrature.integrators", "treeQuadrature.samplers", "treeQuadrature.splits", "treeQuadrature.trees"], "envversion": {"sphinx": 63, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1}, "filenames": ["index.rst", "modules.rst", "setup.rst", "tests.rst", "treeQuadrature.rst", "treeQuadrature.container_integrators.rst", "treeQuadrature.example_problems.rst", "treeQuadrature.gaussian_process.rst", "treeQuadrature.integrators.rst", "treeQuadrature.samplers.rst", "treeQuadrature.splits.rst", "treeQuadrature.trees.rst"], "indexentries": {"a (treequadrature.example_problems.complex_problems.oscillatory attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.a", false]], "a (treequadrature.example_problems.complex_problems.ripple attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Ripple.a", false]], "a (treequadrature.example_problems.simple_problems.discontinuous attribute)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.a", false]], "active_n (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.active_N", false]], "adaptiveimportancesampler (class in treequadrature.samplers.combined_samplers)": [[9, "treeQuadrature.samplers.combined_samplers.AdaptiveImportanceSampler", false]], "adaptiverbfintegral (class in treequadrature.container_integrators.gp_integral)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral", false]], "add() (treequadrature.container.container method)": [[4, "treeQuadrature.container.Container.add", false]], "alpha_ (treequadrature.gaussian_process.fit_gp.sklearngpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.alpha_", false]], "answer (treequadrature.example_problems.base_class.problem attribute)": [[6, "treeQuadrature.example_problems.base_class.Problem.answer", false]], "answer (treequadrature.example_problems.bayes_problems.bayesproblem attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.answer", false]], "answer (treequadrature.example_problems.bayes_problems.camel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.Camel.answer", false]], "answer (treequadrature.example_problems.bayes_problems.quadcamel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.QuadCamel.answer", false]], "answer (treequadrature.example_problems.bayes_problems.simplegaussian attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.SimpleGaussian.answer", false]], "answer (treequadrature.example_problems.complex_problems.oscillatory attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.answer", false]], "answer (treequadrature.example_problems.complex_problems.ripple attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Ripple.answer", false]], "answer (treequadrature.example_problems.simple_problems.discontinuous attribute)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.answer", false]], "base_n (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.base_N", false]], "batchgpintegrator (class in treequadrature.integrators.batch_gp_integrator)": [[8, "treeQuadrature.integrators.batch_gp_integrator.BatchGpIntegrator", false]], "bayesmcintegrator (class in treequadrature.integrators.bmc_integrator)": [[8, "treeQuadrature.integrators.bmc_integrator.BayesMcIntegrator", false]], "bayesproblem (class in treequadrature.example_problems.bayes_problems)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem", false]], "boundary_container() (in module tests.conftest)": [[3, "tests.conftest.boundary_container", false]], "build_grid() (in module treequadrature.integrators.batch_gp_integrator)": [[8, "treeQuadrature.integrators.batch_gp_integrator.build_grid", false]], "c0 (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.C0", false]], "camel (class in treequadrature.example_problems.bayes_problems)": [[6, "treeQuadrature.example_problems.bayes_problems.Camel", false]], "camel (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.Camel", false]], "check_gp (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.check_GP", false]], "check_gp (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.check_GP", false]], "clone_with_theta() (treequadrature.gaussian_process.kernels.polynomial method)": [[7, "treeQuadrature.gaussian_process.kernels.Polynomial.clone_with_theta", false]], "closed_container() (in module tests.conftest)": [[3, "tests.conftest.closed_container", false]], "coeffs (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.coeffs", false]], "compare_integrators() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.compare_integrators", false]], "compute_answer() (treequadrature.example_problems.complex_problems.oscillatory method)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.compute_answer", false]], "compute_answer() (treequadrature.example_problems.simple_problems.cornerpeak method)": [[6, "treeQuadrature.example_problems.simple_problems.CornerPeak.compute_answer", false]], "construct_tree() (treequadrature.trees.base_class.tree method)": [[11, "treeQuadrature.trees.base_class.Tree.construct_tree", false]], "construct_tree() (treequadrature.trees.limited_sample_tree.limitedsampletree method)": [[11, "treeQuadrature.trees.limited_sample_tree.LimitedSampleTree.construct_tree", false]], "construct_tree() (treequadrature.trees.simple_tree.simpletree method)": [[11, "treeQuadrature.trees.simple_tree.SimpleTree.construct_tree", false]], "construct_tree() (treequadrature.trees.weighted_tree.weightedtree method)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.construct_tree", false]], "container (class in treequadrature.container)": [[4, "treeQuadrature.container.Container", false]], "container() (in module tests.conftest)": [[3, "tests.conftest.container", false]], "containerintegral (class in treequadrature.container_integrators.base_class)": [[5, "treeQuadrature.container_integrators.base_class.ContainerIntegral", false]], "containerintegral() (treequadrature.container_integrators.base_class.containerintegral method)": [[5, "treeQuadrature.container_integrators.base_class.ContainerIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.constant_integral.medianintegral method)": [[5, "treeQuadrature.container_integrators.constant_integral.MedianIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.constant_integral.midpointintegral method)": [[5, "treeQuadrature.container_integrators.constant_integral.MidpointIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.gp_integral.adaptiverbfintegral method)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.gp_integral.iterativegpintegral method)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeGpIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.gp_integral.iterativerbfintegral method)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.gp_integral.kernelintegral method)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.gp_integral.polyintegral method)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.containerIntegral", false]], "containerintegral() (treequadrature.container_integrators.monte_carlo_integral.randomintegral method)": [[5, "treeQuadrature.container_integrators.monte_carlo_integral.RandomIntegral.containerIntegral", false]], "cornerpeak (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.CornerPeak", false]], "cov (treequadrature.example_problems.distributions.multivariatenormal attribute)": [[6, "treeQuadrature.example_problems.distributions.MultivariateNormal.cov", false]], "create_kernel() (treequadrature.gaussian_process.fit_gp.gpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.create_kernel", false]], "create_kernel() (treequadrature.gaussian_process.fit_gp.kernelfactory class method)": [[7, "treeQuadrature.gaussian_process.fit_gp.KernelFactory.create_kernel", false]], "create_kernel() (treequadrature.gaussian_process.fit_gp.sklearngpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.create_kernel", false]], "d (treequadrature.example_problems.base_class.problem attribute)": [[6, "treeQuadrature.example_problems.base_class.Problem.D", false]], "d (treequadrature.example_problems.bayes_problems.bayesproblem attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.D", false], [6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.d", false]], "d (treequadrature.example_problems.bayes_problems.camel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.Camel.D", false], [6, "treeQuadrature.example_problems.bayes_problems.Camel.d", false]], "d (treequadrature.example_problems.bayes_problems.quadcamel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.QuadCamel.D", false], [6, "treeQuadrature.example_problems.bayes_problems.QuadCamel.d", false]], "d (treequadrature.example_problems.bayes_problems.simplegaussian attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.SimpleGaussian.D", false], [6, "treeQuadrature.example_problems.bayes_problems.SimpleGaussian.d", false]], "d (treequadrature.example_problems.complex_problems.oscillatory attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.D", false]], "d (treequadrature.example_problems.complex_problems.ripple attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Ripple.D", false]], "d (treequadrature.example_problems.simple_problems.discontinuous attribute)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.D", false]], "default_criterion() (in module treequadrature.gaussian_process.diagnosis)": [[7, "treeQuadrature.gaussian_process.diagnosis.default_criterion", false]], "default_sse_score() (treequadrature.splits.min_sse_split.minssesplit static method)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.default_sse_score", false]], "default_stopping_condition() (in module treequadrature.trees.weighted_tree)": [[11, "treeQuadrature.trees.weighted_tree.default_stopping_condition", false]], "degrees (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.degrees", false]], "diag() (treequadrature.gaussian_process.kernels.polynomial method)": [[7, "treeQuadrature.gaussian_process.kernels.Polynomial.diag", false]], "dimension_proportion (treequadrature.splits.min_sse_split.minssesplit attribute)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.dimension_proportion", false]], "dimension_weights (treequadrature.splits.min_sse_split.minssesplit attribute)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.dimension_weights", false]], "discontinuous (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous", false]], "distributedgptreeintegrator (class in treequadrature.integrators.distributed_gp_integrator)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator", false]], "distributedtreeintegrator (class in treequadrature.integrators.distributed_tree_integrator)": [[8, "treeQuadrature.integrators.distributed_tree_integrator.DistributedTreeIntegrator", false]], "distribution (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.Distribution", false]], "draw_samples_from_containers() (treequadrature.gaussian_process.fit_gp.iterativegpfitting method)": [[7, "treeQuadrature.gaussian_process.fit_gp.IterativeGPFitting.draw_samples_from_containers", false]], "empty() (treequadrature.queues.priorityqueue method)": [[4, "treeQuadrature.queues.PriorityQueue.empty", false]], "empty() (treequadrature.queues.reservoirqueue method)": [[4, "treeQuadrature.queues.ReservoirQueue.empty", false]], "empty_container() (in module tests.conftest)": [[3, "tests.conftest.empty_container", false]], "ensure_2d_output() (in module treequadrature.example_problems.base_class)": [[6, "treeQuadrature.example_problems.base_class.ensure_2d_output", false]], "estimate_error() (treequadrature.container_integrators.monte_carlo_integral.randomintegral method)": [[5, "treeQuadrature.container_integrators.monte_carlo_integral.RandomIntegral.estimate_error", false]], "evaluate_split() (treequadrature.splits.min_sse_split.minssesplit method)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.evaluate_split", false]], "exact_integral() (treequadrature.example_problems.simple_problems.exponentialproduct method)": [[6, "treeQuadrature.example_problems.simple_problems.ExponentialProduct.exact_integral", false]], "exact_integral() (treequadrature.example_problems.simple_problems.quadratic method)": [[6, "treeQuadrature.example_problems.simple_problems.Quadratic.exact_integral", false]], "exponentialproduct (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.ExponentialProduct", false]], "filter_points() (treequadrature.container.container method)": [[4, "treeQuadrature.container.Container.filter_points", false]], "find_neighbors_grid() (in module treequadrature.integrators.batch_gp_integrator)": [[8, "treeQuadrature.integrators.batch_gp_integrator.find_neighbors_grid", false]], "findminsplit() (treequadrature.splits.min_sse_split.minssesplit method)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.findMinSplit", false]], "fit() (treequadrature.gaussian_process.fit_gp.gpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.fit", false]], "fit() (treequadrature.gaussian_process.fit_gp.iterativegpfitting method)": [[7, "treeQuadrature.gaussian_process.fit_gp.IterativeGPFitting.fit", false]], "fit() (treequadrature.gaussian_process.fit_gp.sklearngpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.fit", false]], "fit_gps() (treequadrature.integrators.batch_gp_integrator.batchgpintegrator method)": [[8, "treeQuadrature.integrators.batch_gp_integrator.BatchGpIntegrator.fit_gps", false]], "fit_residuals (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.fit_residuals", false]], "fit_residuals (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.fit_residuals", false]], "fit_residuals (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.fit_residuals", false]], "fit_residuals (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.fit_residuals", false]], "gaussian (class in treequadrature.example_problems.bayes_problems)": [[6, "treeQuadrature.example_problems.bayes_problems.Gaussian", false]], "get() (treequadrature.queues.priorityqueue method)": [[4, "treeQuadrature.queues.PriorityQueue.get", false]], "get() (treequadrature.queues.reservoirqueue method)": [[4, "treeQuadrature.queues.ReservoirQueue.get", false]], "get_length_scale() (in module treequadrature.gaussian_process.kernel_integration)": [[7, "treeQuadrature.gaussian_process.kernel_integration.get_length_scale", false]], "get_probabilities() (treequadrature.queues.reservoirqueue method)": [[4, "treeQuadrature.queues.ReservoirQueue.get_probabilities", false]], "gp (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.gp", false]], "gp (treequadrature.gaussian_process.fit_gp.sklearngpfit attribute)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.gp", false]], "gp_diagnosis() (in module treequadrature.gaussian_process.diagnosis)": [[7, "treeQuadrature.gaussian_process.diagnosis.gp_diagnosis", false]], "gp_kfoldcv() (in module treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.gp_kfoldCV", false]], "gp_params (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.gp_params", false]], "gp_params (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.gp_params", false]], "gp_params (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.gp_params", false]], "gpfit (class in treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit", false]], "gpfit (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.GPFit", false]], "gpfit (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.GPFit", false]], "gpfit (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.GPFit", false]], "handle_bound() (in module treequadrature.utils)": [[4, "treeQuadrature.utils.handle_bound", false]], "handle_input() (treequadrature.example_problems.base_class.problem method)": [[6, "treeQuadrature.example_problems.base_class.Problem.handle_input", false]], "handle_input() (treequadrature.example_problems.simple_problems.discontinuous method)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.handle_input", false]], "handle_mins_maxs() (treequadrature.samplers.base_class.sampler static method)": [[9, "treeQuadrature.samplers.base_class.Sampler.handle_mins_maxs", false]], "hyper_params (treequadrature.gaussian_process.fit_gp.gpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.hyper_params", false]], "hyper_params (treequadrature.gaussian_process.fit_gp.sklearngpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.hyper_params", false]], "ignore_warning (treequadrature.gaussian_process.fit_gp.sklearngpfit attribute)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.ignore_warning", false]], "igp (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.iGP", false]], "igp (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.iGP", false]], "importancesampler (class in treequadrature.samplers.importance_sampler)": [[9, "treeQuadrature.samplers.importance_sampler.ImportanceSampler", false]], "individual_container_integral() (in module treequadrature.integrators.distributed_gp_integrator)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.individual_container_integral", false]], "individual_container_integral() (in module treequadrature.integrators.distributed_tree_integrator)": [[8, "treeQuadrature.integrators.distributed_tree_integrator.individual_container_integral", false]], "individual_container_integral() (in module treequadrature.integrators.tree_integrator)": [[8, "treeQuadrature.integrators.tree_integrator.individual_container_integral", false]], "integral (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.integral", false]], "integrand() (treequadrature.example_problems.base_class.problem method)": [[6, "treeQuadrature.example_problems.base_class.Problem.integrand", false]], "integrand() (treequadrature.example_problems.bayes_problems.bayesproblem method)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.integrand", false]], "integrand() (treequadrature.example_problems.complex_problems.oscillatory method)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.integrand", false]], "integrand() (treequadrature.example_problems.complex_problems.ripple method)": [[6, "treeQuadrature.example_problems.complex_problems.Ripple.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.c0 method)": [[6, "treeQuadrature.example_problems.simple_problems.C0.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.cornerpeak method)": [[6, "treeQuadrature.example_problems.simple_problems.CornerPeak.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.discontinuous method)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.exponentialproduct method)": [[6, "treeQuadrature.example_problems.simple_problems.ExponentialProduct.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.productpeak method)": [[6, "treeQuadrature.example_problems.simple_problems.ProductPeak.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.pyramid method)": [[6, "treeQuadrature.example_problems.simple_problems.Pyramid.integrand", false]], "integrand() (treequadrature.example_problems.simple_problems.quadratic method)": [[6, "treeQuadrature.example_problems.simple_problems.Quadratic.integrand", false]], "integrate_containers() (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator method)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.integrate_containers", false]], "integrate_containers() (treequadrature.integrators.distributed_tree_integrator.distributedtreeintegrator method)": [[8, "treeQuadrature.integrators.distributed_tree_integrator.DistributedTreeIntegrator.integrate_containers", false]], "integrate_containers() (treequadrature.integrators.tree_integrator.treeintegrator method)": [[8, "treeQuadrature.integrators.tree_integrator.TreeIntegrator.integrate_containers", false]], "integrator (class in treequadrature.integrators.base_class)": [[8, "treeQuadrature.integrators.base_class.Integrator", false]], "integrator_wrapper() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.integrator_wrapper", false]], "is_finite (treequadrature.container.container attribute)": [[4, "treeQuadrature.container.Container.is_finite", false]], "is_poor_fit() (in module treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.is_poor_fit", false]], "is_stationary() (treequadrature.gaussian_process.kernels.polynomial method)": [[7, "treeQuadrature.gaussian_process.kernels.Polynomial.is_stationary", false]], "item (treequadrature.queues.prioritizeditem attribute)": [[4, "treeQuadrature.queues.PrioritizedItem.item", false]], "iterativegpfitting (class in treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.IterativeGPFitting", false]], "iterativegpintegral (class in treequadrature.container_integrators.gp_integral)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeGpIntegral", false]], "iterativerbfintegral (class in treequadrature.container_integrators.gp_integral)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral", false]], "kdsplit (class in treequadrature.splits.kd_split)": [[10, "treeQuadrature.splits.kd_split.KdSplit", false]], "keep_samples (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.keep_samples", false]], "kernel_ (treequadrature.gaussian_process.fit_gp.gpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.kernel_", false]], "kernel_ (treequadrature.gaussian_process.fit_gp.sklearngpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.kernel_", false]], "kernel_integration() (in module treequadrature.gaussian_process.kernel_integration)": [[7, "treeQuadrature.gaussian_process.kernel_integration.kernel_integration", false]], "kernelfactory (class in treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.KernelFactory", false]], "kernelintegral (class in treequadrature.container_integrators.gp_integral)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral", false]], "length (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.length", false]], "lhsimportancesampler (class in treequadrature.samplers.combined_samplers)": [[9, "treeQuadrature.samplers.combined_samplers.LHSImportanceSampler", false]], "limitedsampletree (class in treequadrature.trees.limited_sample_tree)": [[11, "treeQuadrature.trees.limited_sample_tree.LimitedSampleTree", false]], "load_existing_results() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.load_existing_results", false]], "max_container_samples (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.max_container_samples", false]], "max_iterations_per_container (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.max_iterations_per_container", false]], "max_redraw (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.max_redraw", false]], "max_redraw (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.max_redraw", false]], "max_redraw (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.max_redraw", false]], "max_splits (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.max_splits", false]], "mcmcsampler (class in treequadrature.samplers.mcmc_sampler)": [[9, "treeQuadrature.samplers.mcmc_sampler.McmcSampler", false]], "mean (treequadrature.example_problems.distributions.multivariatenormal attribute)": [[6, "treeQuadrature.example_problems.distributions.MultivariateNormal.mean", false]], "medianintegral (class in treequadrature.container_integrators.constant_integral)": [[5, "treeQuadrature.container_integrators.constant_integral.MedianIntegral", false]], "midpoint (treequadrature.container.container attribute)": [[4, "treeQuadrature.container.Container.midpoint", false]], "midpointintegral (class in treequadrature.container_integrators.constant_integral)": [[5, "treeQuadrature.container_integrators.constant_integral.MidpointIntegral", false]], "min_container_samples (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.min_container_samples", false]], "min_samples_leaf (treequadrature.splits.min_sse_split.minssesplit attribute)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.min_samples_leaf", false]], "minssesplit (class in treequadrature.splits.min_sse_split)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit", false]], "mixedsampler (class in treequadrature.samplers.mixed_sampler)": [[9, "treeQuadrature.samplers.mixed_sampler.MixedSampler", false]], "mixturedistribution (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.MixtureDistribution", false]], "module": [[2, "module-setup", false], [3, "module-tests", false], [3, "module-tests.conftest", false], [3, "module-tests.test_container", false], [3, "module-tests.test_distributions", false], [3, "module-tests.test_integrators", false], [4, "module-treeQuadrature", false], [4, "module-treeQuadrature.compare_integrators", false], [4, "module-treeQuadrature.container", false], [4, "module-treeQuadrature.queues", false], [4, "module-treeQuadrature.utils", false], [4, "module-treeQuadrature.visualisation", false], [5, "module-treeQuadrature.container_integrators", false], [5, "module-treeQuadrature.container_integrators.base_class", false], [5, "module-treeQuadrature.container_integrators.constant_integral", false], [5, "module-treeQuadrature.container_integrators.gp_integral", false], [5, "module-treeQuadrature.container_integrators.monte_carlo_integral", false], [6, "module-treeQuadrature.example_problems", false], [6, "module-treeQuadrature.example_problems.base_class", false], [6, "module-treeQuadrature.example_problems.bayes_problems", false], [6, "module-treeQuadrature.example_problems.complex_problems", false], [6, "module-treeQuadrature.example_problems.distributions", false], [6, "module-treeQuadrature.example_problems.simple_problems", false], [7, "module-treeQuadrature.gaussian_process", false], [7, "module-treeQuadrature.gaussian_process.diagnosis", false], [7, "module-treeQuadrature.gaussian_process.fit_gp", false], [7, "module-treeQuadrature.gaussian_process.kernel_integration", false], [7, "module-treeQuadrature.gaussian_process.kernels", false], [7, "module-treeQuadrature.gaussian_process.scorings", false], [7, "module-treeQuadrature.gaussian_process.visualisation", false], [8, "module-treeQuadrature.integrators", false], [8, "module-treeQuadrature.integrators.base_class", false], [8, "module-treeQuadrature.integrators.batch_gp_integrator", false], [8, "module-treeQuadrature.integrators.bmc_integrator", false], [8, "module-treeQuadrature.integrators.distributed_gp_integrator", false], [8, "module-treeQuadrature.integrators.distributed_tree_integrator", false], [8, "module-treeQuadrature.integrators.smc_integrator", false], [8, "module-treeQuadrature.integrators.tree_integrator", false], [8, "module-treeQuadrature.integrators.vegas_integrator", false], [9, "module-treeQuadrature.samplers", false], [9, "module-treeQuadrature.samplers.base_class", false], [9, "module-treeQuadrature.samplers.combined_samplers", false], [9, "module-treeQuadrature.samplers.importance_sampler", false], [9, "module-treeQuadrature.samplers.low_discrepancy_samplers", false], [9, "module-treeQuadrature.samplers.mcmc_sampler", false], [9, "module-treeQuadrature.samplers.mixed_sampler", false], [9, "module-treeQuadrature.samplers.stratified_sampler", false], [9, "module-treeQuadrature.samplers.uniform_sampler", false], [10, "module-treeQuadrature.splits", false], [10, "module-treeQuadrature.splits.base_class", false], [10, "module-treeQuadrature.splits.kd_split", false], [10, "module-treeQuadrature.splits.min_sse_split", false], [10, "module-treeQuadrature.splits.uniform_split", false], [11, "module-treeQuadrature.trees", false], [11, "module-treeQuadrature.trees.base_class", false], [11, "module-treeQuadrature.trees.limited_sample_tree", false], [11, "module-treeQuadrature.trees.simple_tree", false], [11, "module-treeQuadrature.trees.weighted_tree", false]], "multivariatenormal (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.MultivariateNormal", false]], "n (treequadrature.container.container attribute)": [[4, "treeQuadrature.container.Container.N", false]], "n (treequadrature.container.container property)": [[4, "id0", false]], "n (treequadrature.queues.priorityqueue property)": [[4, "treeQuadrature.queues.PriorityQueue.n", false]], "n_divisions (treequadrature.splits.uniform_split.uniformsplit attribute)": [[10, "treeQuadrature.splits.uniform_split.UniformSplit.n_divisions", false]], "n_samples (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.n_samples", false]], "n_samples (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.n_samples", false]], "n_samples (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.n_samples", false]], "n_samples (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.n_samples", false]], "n_splits (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.n_splits", false]], "n_splits (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.n_splits", false]], "n_splits (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.n_splits", false]], "n_splits (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.n_splits", false]], "n_splits (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.n_splits", false]], "n_tuning (treequadrature.gaussian_process.fit_gp.sklearngpfit attribute)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.n_tuning", false]], "optimizer (treequadrature.gaussian_process.fit_gp.sklearngpfit attribute)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.optimizer", false]], "oscillatory (class in treequadrature.example_problems.complex_problems)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory", false]], "p (treequadrature.example_problems.bayes_problems.bayesproblem attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.p", false]], "p (treequadrature.example_problems.bayes_problems.camel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.Camel.p", false]], "p (treequadrature.example_problems.bayes_problems.quadcamel attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.QuadCamel.p", false]], "p (treequadrature.example_problems.bayes_problems.simplegaussian attribute)": [[6, "treeQuadrature.example_problems.bayes_problems.SimpleGaussian.p", false]], "p (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.P", false]], "pdf() (treequadrature.example_problems.distributions.distribution method)": [[6, "treeQuadrature.example_problems.distributions.Distribution.pdf", false]], "pdf() (treequadrature.example_problems.distributions.mixturedistribution method)": [[6, "treeQuadrature.example_problems.distributions.MixtureDistribution.pdf", false]], "pdf() (treequadrature.example_problems.distributions.multivariatenormal method)": [[6, "treeQuadrature.example_problems.distributions.MultivariateNormal.pdf", false]], "pdf() (treequadrature.example_problems.distributions.uniform method)": [[6, "treeQuadrature.example_problems.distributions.Uniform.pdf", false]], "plot_container() (in module treequadrature.visualisation)": [[4, "treeQuadrature.visualisation.plot_container", false]], "plot_containers() (in module treequadrature.visualisation)": [[4, "treeQuadrature.visualisation.plot_containers", false]], "plot_errors() (in module treequadrature.visualisation)": [[4, "treeQuadrature.visualisation.plot_errors", false]], "plot_gp() (in module treequadrature.gaussian_process.visualisation)": [[7, "treeQuadrature.gaussian_process.visualisation.plot_gp", false]], "plot_integrand() (in module treequadrature.visualisation)": [[4, "treeQuadrature.visualisation.plot_integrand", false]], "plot_times() (in module treequadrature.visualisation)": [[4, "treeQuadrature.visualisation.plot_times", false]], "poly_post() (in module treequadrature.gaussian_process.kernel_integration)": [[7, "treeQuadrature.gaussian_process.kernel_integration.poly_post", false]], "polyintegral (class in treequadrature.container_integrators.gp_integral)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral", false]], "polynomial (class in treequadrature.gaussian_process.kernels)": [[7, "treeQuadrature.gaussian_process.kernels.Polynomial", false]], "predict() (treequadrature.gaussian_process.fit_gp.gpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.predict", false]], "predict() (treequadrature.gaussian_process.fit_gp.sklearngpfit method)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.predict", false]], "predictive_ll() (in module treequadrature.gaussian_process.scorings)": [[7, "treeQuadrature.gaussian_process.scorings.predictive_ll", false]], "prioritizeditem (class in treequadrature.queues)": [[4, "treeQuadrature.queues.PrioritizedItem", false]], "priority (treequadrature.queues.prioritizeditem attribute)": [[4, "treeQuadrature.queues.PrioritizedItem.priority", false]], "priorityqueue (class in treequadrature.queues)": [[4, "treeQuadrature.queues.PriorityQueue", false]], "problem (class in treequadrature.example_problems.base_class)": [[6, "treeQuadrature.example_problems.base_class.Problem", false]], "productpeak (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.ProductPeak", false]], "properties (treequadrature.container.container attribute)": [[4, "treeQuadrature.container.Container.Properties", false]], "put() (treequadrature.queues.priorityqueue method)": [[4, "treeQuadrature.queues.PriorityQueue.put", false]], "put() (treequadrature.queues.reservoirqueue method)": [[4, "treeQuadrature.queues.ReservoirQueue.put", false]], "pyramid (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.Pyramid", false]], "quadcamel (class in treequadrature.example_problems.bayes_problems)": [[6, "treeQuadrature.example_problems.bayes_problems.QuadCamel", false]], "quadcamel (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.QuadCamel", false]], "quadratic (class in treequadrature.example_problems.simple_problems)": [[6, "treeQuadrature.example_problems.simple_problems.Quadratic", false]], "queue (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.queue", false]], "r2() (in module treequadrature.gaussian_process.scorings)": [[7, "treeQuadrature.gaussian_process.scorings.r2", false]], "randomintegral (class in treequadrature.container_integrators.monte_carlo_integral)": [[5, "treeQuadrature.container_integrators.monte_carlo_integral.RandomIntegral", false]], "range (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.range", false]], "rbf_mean_post() (in module treequadrature.gaussian_process.kernel_integration)": [[7, "treeQuadrature.gaussian_process.kernel_integration.rbf_mean_post", false]], "rbf_var_post() (in module treequadrature.gaussian_process.kernel_integration)": [[7, "treeQuadrature.gaussian_process.kernel_integration.rbf_var_post", false]], "register_kernel() (treequadrature.gaussian_process.fit_gp.kernelfactory class method)": [[7, "treeQuadrature.gaussian_process.fit_gp.KernelFactory.register_kernel", false]], "reservoirqueue (class in treequadrature.queues)": [[4, "treeQuadrature.queues.ReservoirQueue", false]], "resultdict (class in treequadrature.utils)": [[4, "treeQuadrature.utils.ResultDict", false]], "return_std (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.return_std", false]], "ripple (class in treequadrature.example_problems.complex_problems)": [[6, "treeQuadrature.example_problems.complex_problems.Ripple", false]], "rvs() (treequadrature.container.container method)": [[4, "treeQuadrature.container.Container.rvs", false]], "rvs() (treequadrature.example_problems.bayes_problems.bayesproblem method)": [[6, "treeQuadrature.example_problems.bayes_problems.BayesProblem.rvs", false]], "rvs() (treequadrature.example_problems.distributions.distribution method)": [[6, "treeQuadrature.example_problems.distributions.Distribution.rvs", false]], "rvs() (treequadrature.example_problems.distributions.mixturedistribution method)": [[6, "treeQuadrature.example_problems.distributions.MixtureDistribution.rvs", false]], "rvs() (treequadrature.example_problems.distributions.multivariatenormal method)": [[6, "treeQuadrature.example_problems.distributions.MultivariateNormal.rvs", false]], "rvs() (treequadrature.example_problems.distributions.uniform method)": [[6, "treeQuadrature.example_problems.distributions.Uniform.rvs", false]], "rvs() (treequadrature.samplers.base_class.sampler method)": [[9, "treeQuadrature.samplers.base_class.Sampler.rvs", false]], "rvs() (treequadrature.samplers.combined_samplers.adaptiveimportancesampler method)": [[9, "treeQuadrature.samplers.combined_samplers.AdaptiveImportanceSampler.rvs", false]], "rvs() (treequadrature.samplers.combined_samplers.lhsimportancesampler method)": [[9, "treeQuadrature.samplers.combined_samplers.LHSImportanceSampler.rvs", false]], "rvs() (treequadrature.samplers.importance_sampler.importancesampler method)": [[9, "treeQuadrature.samplers.importance_sampler.ImportanceSampler.rvs", false]], "rvs() (treequadrature.samplers.low_discrepancy_samplers.sobolsampler method)": [[9, "treeQuadrature.samplers.low_discrepancy_samplers.SobolSampler.rvs", false]], "rvs() (treequadrature.samplers.mcmc_sampler.mcmcsampler method)": [[9, "treeQuadrature.samplers.mcmc_sampler.McmcSampler.rvs", false]], "rvs() (treequadrature.samplers.mixed_sampler.mixedsampler method)": [[9, "treeQuadrature.samplers.mixed_sampler.MixedSampler.rvs", false]], "rvs() (treequadrature.samplers.stratified_sampler.stratifiedsampler method)": [[9, "treeQuadrature.samplers.stratified_sampler.StratifiedSampler.rvs", false]], "rvs() (treequadrature.samplers.uniform_sampler.uniformsampler method)": [[9, "treeQuadrature.samplers.uniform_sampler.UniformSampler.rvs", false]], "sampler (class in treequadrature.samplers.base_class)": [[9, "treeQuadrature.samplers.base_class.Sampler", false]], "sampler (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.sampler", false]], "sampler (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.sampler", false]], "sampler (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.sampler", false]], "scale() (in module treequadrature.utils)": [[4, "treeQuadrature.utils.scale", false]], "score_direction (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.score_direction", false]], "scoring (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.scoring", false]], "scoring (treequadrature.container_integrators.gp_integral.iterativerbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral.scoring", false]], "scoring_function (treequadrature.splits.min_sse_split.minssesplit attribute)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.scoring_function", false]], "setdefault() (treequadrature.utils.resultdict method)": [[4, "treeQuadrature.utils.ResultDict.setdefault", false]], "setup": [[2, "module-setup", false]], "shapeadapter (class in treequadrature.integrators.vegas_integrator)": [[8, "treeQuadrature.integrators.vegas_integrator.ShapeAdapter", false]], "simple_container() (in module tests.conftest)": [[3, "tests.conftest.simple_container", false]], "simplegaussian (class in treequadrature.example_problems.bayes_problems)": [[6, "treeQuadrature.example_problems.bayes_problems.SimpleGaussian", false]], "simpletree (class in treequadrature.trees.simple_tree)": [[11, "treeQuadrature.trees.simple_tree.SimpleTree", false]], "sklearngpfit (class in treequadrature.gaussian_process.fit_gp)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit", false]], "smcintegrator (class in treequadrature.integrators.smc_integrator)": [[8, "treeQuadrature.integrators.smc_integrator.SmcIntegrator", false]], "sobolsampler (class in treequadrature.samplers.low_discrepancy_samplers)": [[9, "treeQuadrature.samplers.low_discrepancy_samplers.SobolSampler", false]], "split (class in treequadrature.splits.base_class)": [[10, "treeQuadrature.splits.base_class.Split", false]], "split (treequadrature.integrators.distributed_gp_integrator.distributedgptreeintegrator attribute)": [[8, "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator.split", false]], "split (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.split", false]], "split() (treequadrature.container.container method)": [[4, "treeQuadrature.container.Container.split", false]], "split() (treequadrature.splits.base_class.split method)": [[10, "treeQuadrature.splits.base_class.Split.split", false]], "split() (treequadrature.splits.kd_split.kdsplit method)": [[10, "treeQuadrature.splits.kd_split.KdSplit.split", false]], "split() (treequadrature.splits.min_sse_split.minssesplit method)": [[10, "treeQuadrature.splits.min_sse_split.MinSseSplit.split", false]], "split() (treequadrature.splits.uniform_split.uniformsplit method)": [[10, "treeQuadrature.splits.uniform_split.UniformSplit.split", false]], "stopping_condition (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.stopping_condition", false]], "stratifiedsampler (class in treequadrature.samplers.stratified_sampler)": [[9, "treeQuadrature.samplers.stratified_sampler.StratifiedSampler", false]], "subdivide_domain() (treequadrature.samplers.base_class.sampler static method)": [[9, "treeQuadrature.samplers.base_class.Sampler.subdivide_domain", false]], "test_add_method() (in module tests.test_container)": [[3, "tests.test_container.test_add_method", false]], "test_container_integrals() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.test_container_integrals", false]], "test_distributedtreeintegrator() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_DistributedTreeIntegrator", false]], "test_infinite_container() (in module tests.test_container)": [[3, "tests.test_container.test_infinite_container", false]], "test_init() (in module tests.test_container)": [[3, "tests.test_container.test_init", false]], "test_init_rectangle() (in module tests.test_container)": [[3, "tests.test_container.test_init_rectangle", false]], "test_integrator_performance_with_params() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.test_integrator_performance_with_params", false]], "test_integrators() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.test_integrators", false]], "test_io() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_io", false]], "test_limitedsampleintegrator() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_LimitedSampleIntegrator", false]], "test_queueintegrator() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_QueueIntegrator", false]], "test_return_std() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_return_std", false]], "test_rvs_method() (in module tests.test_container)": [[3, "tests.test_container.test_rvs_method", false]], "test_shapes() (in module tests.test_distributions)": [[3, "tests.test_distributions.test_shapes", false]], "test_simpleintegrator() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_SimpleIntegrator", false]], "test_split_method() (in module tests.test_container)": [[3, "tests.test_container.test_split_method", false]], "test_treeintegrator_io() (in module tests.test_integrators)": [[3, "tests.test_integrators.test_treeIntegrator_io", false]], "test_uniform_pdf() (in module tests.test_distributions)": [[3, "tests.test_distributions.test_uniform_pdf", false]], "test_uniform_rvs() (in module tests.test_distributions)": [[3, "tests.test_distributions.test_uniform_rvs", false]], "test_volume_method() (in module tests.test_container)": [[3, "tests.test_container.test_volume_method", false]], "tests": [[3, "module-tests", false]], "tests.conftest": [[3, "module-tests.conftest", false]], "tests.test_container": [[3, "module-tests.test_container", false]], "tests.test_distributions": [[3, "module-tests.test_distributions", false]], "tests.test_integrators": [[3, "module-tests.test_integrators", false]], "thershold (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.thershold", false]], "thershold (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.thershold", false]], "threshold (treequadrature.container_integrators.gp_integral.polyintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.PolyIntegral.threshold", false]], "threshold_direction (treequadrature.container_integrators.gp_integral.adaptiverbfintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral.threshold_direction", false]], "threshold_direction (treequadrature.container_integrators.gp_integral.kernelintegral attribute)": [[5, "treeQuadrature.container_integrators.gp_integral.KernelIntegral.threshold_direction", false]], "tree (class in treequadrature.trees.base_class)": [[11, "treeQuadrature.trees.base_class.Tree", false]], "treeintegrator (class in treequadrature.integrators.tree_integrator)": [[8, "treeQuadrature.integrators.tree_integrator.TreeIntegrator", false]], "treequadrature": [[4, "module-treeQuadrature", false]], "treequadrature.compare_integrators": [[4, "module-treeQuadrature.compare_integrators", false]], "treequadrature.container": [[4, "module-treeQuadrature.container", false]], "treequadrature.container_integrators": [[5, "module-treeQuadrature.container_integrators", false]], "treequadrature.container_integrators.base_class": [[5, "module-treeQuadrature.container_integrators.base_class", false]], "treequadrature.container_integrators.constant_integral": [[5, "module-treeQuadrature.container_integrators.constant_integral", false]], "treequadrature.container_integrators.gp_integral": [[5, "module-treeQuadrature.container_integrators.gp_integral", false]], "treequadrature.container_integrators.monte_carlo_integral": [[5, "module-treeQuadrature.container_integrators.monte_carlo_integral", false]], "treequadrature.example_problems": [[6, "module-treeQuadrature.example_problems", false]], "treequadrature.example_problems.base_class": [[6, "module-treeQuadrature.example_problems.base_class", false]], "treequadrature.example_problems.bayes_problems": [[6, "module-treeQuadrature.example_problems.bayes_problems", false]], "treequadrature.example_problems.complex_problems": [[6, "module-treeQuadrature.example_problems.complex_problems", false]], "treequadrature.example_problems.distributions": [[6, "module-treeQuadrature.example_problems.distributions", false]], "treequadrature.example_problems.simple_problems": [[6, "module-treeQuadrature.example_problems.simple_problems", false]], "treequadrature.gaussian_process": [[7, "module-treeQuadrature.gaussian_process", false]], "treequadrature.gaussian_process.diagnosis": [[7, "module-treeQuadrature.gaussian_process.diagnosis", false]], "treequadrature.gaussian_process.fit_gp": [[7, "module-treeQuadrature.gaussian_process.fit_gp", false]], "treequadrature.gaussian_process.kernel_integration": [[7, "module-treeQuadrature.gaussian_process.kernel_integration", false]], "treequadrature.gaussian_process.kernels": [[7, "module-treeQuadrature.gaussian_process.kernels", false]], "treequadrature.gaussian_process.scorings": [[7, "module-treeQuadrature.gaussian_process.scorings", false]], "treequadrature.gaussian_process.visualisation": [[7, "module-treeQuadrature.gaussian_process.visualisation", false]], "treequadrature.integrators": [[8, "module-treeQuadrature.integrators", false]], "treequadrature.integrators.base_class": [[8, "module-treeQuadrature.integrators.base_class", false]], "treequadrature.integrators.batch_gp_integrator": [[8, "module-treeQuadrature.integrators.batch_gp_integrator", false]], "treequadrature.integrators.bmc_integrator": [[8, "module-treeQuadrature.integrators.bmc_integrator", false]], "treequadrature.integrators.distributed_gp_integrator": [[8, "module-treeQuadrature.integrators.distributed_gp_integrator", false]], "treequadrature.integrators.distributed_tree_integrator": [[8, "module-treeQuadrature.integrators.distributed_tree_integrator", false]], "treequadrature.integrators.smc_integrator": [[8, "module-treeQuadrature.integrators.smc_integrator", false]], "treequadrature.integrators.tree_integrator": [[8, "module-treeQuadrature.integrators.tree_integrator", false]], "treequadrature.integrators.vegas_integrator": [[8, "module-treeQuadrature.integrators.vegas_integrator", false]], "treequadrature.queues": [[4, "module-treeQuadrature.queues", false]], "treequadrature.samplers": [[9, "module-treeQuadrature.samplers", false]], "treequadrature.samplers.base_class": [[9, "module-treeQuadrature.samplers.base_class", false]], "treequadrature.samplers.combined_samplers": [[9, "module-treeQuadrature.samplers.combined_samplers", false]], "treequadrature.samplers.importance_sampler": [[9, "module-treeQuadrature.samplers.importance_sampler", false]], "treequadrature.samplers.low_discrepancy_samplers": [[9, "module-treeQuadrature.samplers.low_discrepancy_samplers", false]], "treequadrature.samplers.mcmc_sampler": [[9, "module-treeQuadrature.samplers.mcmc_sampler", false]], "treequadrature.samplers.mixed_sampler": [[9, "module-treeQuadrature.samplers.mixed_sampler", false]], "treequadrature.samplers.stratified_sampler": [[9, "module-treeQuadrature.samplers.stratified_sampler", false]], "treequadrature.samplers.uniform_sampler": [[9, "module-treeQuadrature.samplers.uniform_sampler", false]], "treequadrature.splits": [[10, "module-treeQuadrature.splits", false]], "treequadrature.splits.base_class": [[10, "module-treeQuadrature.splits.base_class", false]], "treequadrature.splits.kd_split": [[10, "module-treeQuadrature.splits.kd_split", false]], "treequadrature.splits.min_sse_split": [[10, "module-treeQuadrature.splits.min_sse_split", false]], "treequadrature.splits.uniform_split": [[10, "module-treeQuadrature.splits.uniform_split", false]], "treequadrature.trees": [[11, "module-treeQuadrature.trees", false]], "treequadrature.trees.base_class": [[11, "module-treeQuadrature.trees.base_class", false]], "treequadrature.trees.limited_sample_tree": [[11, "module-treeQuadrature.trees.limited_sample_tree", false]], "treequadrature.trees.simple_tree": [[11, "module-treeQuadrature.trees.simple_tree", false]], "treequadrature.trees.weighted_tree": [[11, "module-treeQuadrature.trees.weighted_tree", false]], "treequadrature.utils": [[4, "module-treeQuadrature.utils", false]], "treequadrature.visualisation": [[4, "module-treeQuadrature.visualisation", false]], "u (treequadrature.example_problems.complex_problems.oscillatory attribute)": [[6, "treeQuadrature.example_problems.complex_problems.Oscillatory.u", false]], "u1 (treequadrature.example_problems.simple_problems.discontinuous attribute)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.u1", false]], "u2 (treequadrature.example_problems.simple_problems.discontinuous attribute)": [[6, "treeQuadrature.example_problems.simple_problems.Discontinuous.u2", false]], "uniform (class in treequadrature.example_problems.distributions)": [[6, "treeQuadrature.example_problems.distributions.Uniform", false]], "uniform_dist() (in module tests.test_distributions)": [[3, "tests.test_distributions.uniform_dist", false]], "uniformsampler (class in treequadrature.samplers.uniform_sampler)": [[9, "treeQuadrature.samplers.uniform_sampler.UniformSampler", false]], "uniformsplit (class in treequadrature.splits.uniform_split)": [[10, "treeQuadrature.splits.uniform_split.UniformSplit", false]], "update() (treequadrature.utils.resultdict method)": [[4, "treeQuadrature.utils.ResultDict.update", false]], "vegasintegrator (class in treequadrature.integrators.vegas_integrator)": [[8, "treeQuadrature.integrators.vegas_integrator.VegasIntegrator", false]], "volume (treequadrature.container.container attribute)": [[4, "treeQuadrature.container.Container.volume", false]], "weightedtree (class in treequadrature.trees.weighted_tree)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree", false]], "weighting_function (treequadrature.trees.weighted_tree.weightedtree attribute)": [[11, "treeQuadrature.trees.weighted_tree.WeightedTree.weighting_function", false]], "write_results() (in module treequadrature.compare_integrators)": [[4, "treeQuadrature.compare_integrators.write_results", false]], "x (treequadrature.container.container property)": [[4, "treeQuadrature.container.Container.X", false]], "x_train_ (treequadrature.gaussian_process.fit_gp.gpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.X_train_", false]], "x_train_ (treequadrature.gaussian_process.fit_gp.sklearngpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.X_train_", false]], "y (treequadrature.container.container property)": [[4, "treeQuadrature.container.Container.y", false]], "y_train_ (treequadrature.gaussian_process.fit_gp.gpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.GPFit.y_train_", false]], "y_train_ (treequadrature.gaussian_process.fit_gp.sklearngpfit property)": [[7, "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit.y_train_", false]]}, "objects": {"": [[2, 0, 0, "-", "setup"], [3, 0, 0, "-", "tests"], [4, 0, 0, "-", "treeQuadrature"]], "tests": [[3, 0, 0, "-", "conftest"], [3, 0, 0, "-", "test_container"], [3, 0, 0, "-", "test_distributions"], [3, 0, 0, "-", "test_integrators"]], "tests.conftest": [[3, 1, 1, "", "boundary_container"], [3, 1, 1, "", "closed_container"], [3, 1, 1, "", "container"], [3, 1, 1, "", "empty_container"], [3, 1, 1, "", "simple_container"]], "tests.test_container": [[3, 1, 1, "", "test_add_method"], [3, 1, 1, "", "test_infinite_container"], [3, 1, 1, "", "test_init"], [3, 1, 1, "", "test_init_rectangle"], [3, 1, 1, "", "test_rvs_method"], [3, 1, 1, "", "test_split_method"], [3, 1, 1, "", "test_volume_method"]], "tests.test_distributions": [[3, 1, 1, "", "test_shapes"], [3, 1, 1, "", "test_uniform_pdf"], [3, 1, 1, "", "test_uniform_rvs"], [3, 1, 1, "", "uniform_dist"]], "tests.test_integrators": [[3, 1, 1, "", "test_DistributedTreeIntegrator"], [3, 1, 1, "", "test_LimitedSampleIntegrator"], [3, 1, 1, "", "test_QueueIntegrator"], [3, 1, 1, "", "test_SimpleIntegrator"], [3, 1, 1, "", "test_io"], [3, 1, 1, "", "test_return_std"], [3, 1, 1, "", "test_treeIntegrator_io"]], "treeQuadrature": [[4, 0, 0, "-", "compare_integrators"], [4, 0, 0, "-", "container"], [5, 0, 0, "-", "container_integrators"], [6, 0, 0, "-", "example_problems"], [7, 0, 0, "-", "gaussian_process"], [8, 0, 0, "-", "integrators"], [4, 0, 0, "-", "queues"], [9, 0, 0, "-", "samplers"], [10, 0, 0, "-", "splits"], [11, 0, 0, "-", "trees"], [4, 0, 0, "-", "utils"], [4, 0, 0, "-", "visualisation"]], "treeQuadrature.compare_integrators": [[4, 1, 1, "", "compare_integrators"], [4, 1, 1, "", "integrator_wrapper"], [4, 1, 1, "", "load_existing_results"], [4, 1, 1, "", "test_container_integrals"], [4, 1, 1, "", "test_integrator_performance_with_params"], [4, 1, 1, "", "test_integrators"], [4, 1, 1, "", "write_results"]], "treeQuadrature.container": [[4, 2, 1, "", "Container"]], "treeQuadrature.container.Container": [[4, 3, 1, "id0", "N"], [4, 4, 1, "", "Properties"], [4, 3, 1, "", "X"], [4, 5, 1, "", "add"], [4, 5, 1, "", "filter_points"], [4, 4, 1, "", "is_finite"], [4, 4, 1, "", "midpoint"], [4, 5, 1, "", "rvs"], [4, 5, 1, "", "split"], [4, 4, 1, "", "volume"], [4, 3, 1, "", "y"]], "treeQuadrature.container_integrators": [[5, 0, 0, "-", "base_class"], [5, 0, 0, "-", "constant_integral"], [5, 0, 0, "-", "gp_integral"], [5, 0, 0, "-", "monte_carlo_integral"]], "treeQuadrature.container_integrators.base_class": [[5, 2, 1, "", "ContainerIntegral"]], "treeQuadrature.container_integrators.base_class.ContainerIntegral": [[5, 5, 1, "", "containerIntegral"]], "treeQuadrature.container_integrators.constant_integral": [[5, 2, 1, "", "MedianIntegral"], [5, 2, 1, "", "MidpointIntegral"]], "treeQuadrature.container_integrators.constant_integral.MedianIntegral": [[5, 5, 1, "", "containerIntegral"]], "treeQuadrature.container_integrators.constant_integral.MidpointIntegral": [[5, 5, 1, "", "containerIntegral"]], "treeQuadrature.container_integrators.gp_integral": [[5, 2, 1, "", "AdaptiveRbfIntegral"], [5, 2, 1, "", "IterativeGpIntegral"], [5, 2, 1, "", "IterativeRbfIntegral"], [5, 2, 1, "", "KernelIntegral"], [5, 2, 1, "", "PolyIntegral"]], "treeQuadrature.container_integrators.gp_integral.AdaptiveRbfIntegral": [[5, 4, 1, "", "GPFit"], [5, 4, 1, "", "check_GP"], [5, 5, 1, "", "containerIntegral"], [5, 4, 1, "", "fit_residuals"], [5, 4, 1, "", "gp_params"], [5, 4, 1, "", "keep_samples"], [5, 4, 1, "", "max_redraw"], [5, 4, 1, "", "n_samples"], [5, 4, 1, "", "n_splits"], [5, 4, 1, "", "sampler"], [5, 4, 1, "", "scoring"], [5, 4, 1, "", "thershold"], [5, 4, 1, "", "threshold_direction"]], "treeQuadrature.container_integrators.gp_integral.IterativeGpIntegral": [[5, 5, 1, "", "containerIntegral"]], "treeQuadrature.container_integrators.gp_integral.IterativeRbfIntegral": [[5, 4, 1, "", "GPFit"], [5, 5, 1, "", "containerIntegral"], [5, 4, 1, "", "fit_residuals"], [5, 4, 1, "", "gp_params"], [5, 4, 1, "", "n_samples"], [5, 4, 1, "", "n_splits"], [5, 4, 1, "", "sampler"], [5, 4, 1, "", "score_direction"], [5, 4, 1, "", "scoring"]], "treeQuadrature.container_integrators.gp_integral.KernelIntegral": [[5, 4, 1, "", "check_GP"], [5, 5, 1, "", "containerIntegral"], [5, 4, 1, "", "fit_residuals"], [5, 4, 1, "", "gp"], [5, 4, 1, "", "iGP"], [5, 4, 1, "", "length"], [5, 4, 1, "", "max_redraw"], [5, 4, 1, "", "n_samples"], [5, 4, 1, "", "n_splits"], [5, 4, 1, "", "range"], [5, 4, 1, "", "thershold"], [5, 4, 1, "", "threshold_direction"]], "treeQuadrature.container_integrators.gp_integral.PolyIntegral": [[5, 4, 1, "", "GPFit"], [5, 4, 1, "", "coeffs"], [5, 5, 1, "", "containerIntegral"], [5, 4, 1, "", "degrees"], [5, 4, 1, "", "fit_residuals"], [5, 4, 1, "", "gp_params"], [5, 4, 1, "", "iGP"], [5, 4, 1, "", "max_redraw"], [5, 4, 1, "", "n_samples"], [5, 4, 1, "", "n_splits"], [5, 4, 1, "", "return_std"], [5, 4, 1, "", "threshold"]], "treeQuadrature.container_integrators.monte_carlo_integral": [[5, 2, 1, "", "RandomIntegral"]], "treeQuadrature.container_integrators.monte_carlo_integral.RandomIntegral": [[5, 5, 1, "", "containerIntegral"], [5, 5, 1, "", "estimate_error"]], "treeQuadrature.example_problems": [[6, 0, 0, "-", "base_class"], [6, 0, 0, "-", "bayes_problems"], [6, 0, 0, "-", "complex_problems"], [6, 0, 0, "-", "distributions"], [6, 0, 0, "-", "simple_problems"]], "treeQuadrature.example_problems.base_class": [[6, 2, 1, "", "Problem"], [6, 1, 1, "", "ensure_2d_output"]], "treeQuadrature.example_problems.base_class.Problem": [[6, 4, 1, "", "D"], [6, 4, 1, "", "answer"], [6, 5, 1, "", "handle_input"], [6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.bayes_problems": [[6, 2, 1, "", "BayesProblem"], [6, 2, 1, "", "Camel"], [6, 2, 1, "", "Gaussian"], [6, 2, 1, "", "QuadCamel"], [6, 2, 1, "", "SimpleGaussian"]], "treeQuadrature.example_problems.bayes_problems.BayesProblem": [[6, 4, 1, "", "D"], [6, 4, 1, "", "answer"], [6, 4, 1, "", "d"], [6, 5, 1, "", "integrand"], [6, 4, 1, "", "p"], [6, 5, 1, "", "rvs"]], "treeQuadrature.example_problems.bayes_problems.Camel": [[6, 4, 1, "", "D"], [6, 4, 1, "", "answer"], [6, 4, 1, "", "d"], [6, 4, 1, "", "p"]], "treeQuadrature.example_problems.bayes_problems.QuadCamel": [[6, 4, 1, "", "D"], [6, 4, 1, "", "answer"], [6, 4, 1, "", "d"], [6, 4, 1, "", "p"]], "treeQuadrature.example_problems.bayes_problems.SimpleGaussian": [[6, 4, 1, "", "D"], [6, 4, 1, "", "answer"], [6, 4, 1, "", "d"], [6, 4, 1, "", "p"]], "treeQuadrature.example_problems.complex_problems": [[6, 2, 1, "", "Oscillatory"], [6, 2, 1, "", "Ripple"]], "treeQuadrature.example_problems.complex_problems.Oscillatory": [[6, 4, 1, "", "D"], [6, 4, 1, "", "a"], [6, 4, 1, "", "answer"], [6, 5, 1, "", "compute_answer"], [6, 5, 1, "", "integrand"], [6, 4, 1, "", "u"]], "treeQuadrature.example_problems.complex_problems.Ripple": [[6, 4, 1, "", "D"], [6, 4, 1, "", "a"], [6, 4, 1, "", "answer"], [6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.distributions": [[6, 2, 1, "", "Camel"], [6, 2, 1, "", "Distribution"], [6, 2, 1, "", "MixtureDistribution"], [6, 2, 1, "", "MultivariateNormal"], [6, 2, 1, "", "QuadCamel"], [6, 2, 1, "", "Uniform"]], "treeQuadrature.example_problems.distributions.Distribution": [[6, 5, 1, "", "pdf"], [6, 5, 1, "", "rvs"]], "treeQuadrature.example_problems.distributions.MixtureDistribution": [[6, 5, 1, "", "pdf"], [6, 5, 1, "", "rvs"]], "treeQuadrature.example_problems.distributions.MultivariateNormal": [[6, 4, 1, "", "cov"], [6, 4, 1, "", "mean"], [6, 5, 1, "", "pdf"], [6, 5, 1, "", "rvs"]], "treeQuadrature.example_problems.distributions.Uniform": [[6, 5, 1, "", "pdf"], [6, 5, 1, "", "rvs"]], "treeQuadrature.example_problems.simple_problems": [[6, 2, 1, "", "C0"], [6, 2, 1, "", "CornerPeak"], [6, 2, 1, "", "Discontinuous"], [6, 2, 1, "", "ExponentialProduct"], [6, 2, 1, "", "ProductPeak"], [6, 2, 1, "", "Pyramid"], [6, 2, 1, "", "Quadratic"]], "treeQuadrature.example_problems.simple_problems.C0": [[6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.simple_problems.CornerPeak": [[6, 5, 1, "", "compute_answer"], [6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.simple_problems.Discontinuous": [[6, 4, 1, "", "D"], [6, 4, 1, "", "a"], [6, 4, 1, "", "answer"], [6, 5, 1, "", "handle_input"], [6, 5, 1, "", "integrand"], [6, 4, 1, "", "u1"], [6, 4, 1, "", "u2"]], "treeQuadrature.example_problems.simple_problems.ExponentialProduct": [[6, 5, 1, "", "exact_integral"], [6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.simple_problems.ProductPeak": [[6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.simple_problems.Pyramid": [[6, 5, 1, "", "integrand"]], "treeQuadrature.example_problems.simple_problems.Quadratic": [[6, 5, 1, "", "exact_integral"], [6, 5, 1, "", "integrand"]], "treeQuadrature.gaussian_process": [[7, 0, 0, "-", "diagnosis"], [7, 0, 0, "-", "fit_gp"], [7, 0, 0, "-", "kernel_integration"], [7, 0, 0, "-", "kernels"], [7, 0, 0, "-", "scorings"], [7, 0, 0, "-", "visualisation"]], "treeQuadrature.gaussian_process.diagnosis": [[7, 1, 1, "", "default_criterion"], [7, 1, 1, "", "gp_diagnosis"]], "treeQuadrature.gaussian_process.fit_gp": [[7, 2, 1, "", "GPFit"], [7, 2, 1, "", "IterativeGPFitting"], [7, 2, 1, "", "KernelFactory"], [7, 2, 1, "", "SklearnGPFit"], [7, 1, 1, "", "gp_kfoldCV"], [7, 1, 1, "", "is_poor_fit"]], "treeQuadrature.gaussian_process.fit_gp.GPFit": [[7, 3, 1, "", "X_train_"], [7, 5, 1, "", "create_kernel"], [7, 5, 1, "", "fit"], [7, 3, 1, "", "hyper_params"], [7, 3, 1, "", "kernel_"], [7, 5, 1, "", "predict"], [7, 3, 1, "", "y_train_"]], "treeQuadrature.gaussian_process.fit_gp.IterativeGPFitting": [[7, 5, 1, "", "draw_samples_from_containers"], [7, 5, 1, "", "fit"]], "treeQuadrature.gaussian_process.fit_gp.KernelFactory": [[7, 5, 1, "", "create_kernel"], [7, 5, 1, "", "register_kernel"]], "treeQuadrature.gaussian_process.fit_gp.SklearnGPFit": [[7, 3, 1, "", "X_train_"], [7, 3, 1, "", "alpha_"], [7, 5, 1, "", "create_kernel"], [7, 5, 1, "", "fit"], [7, 4, 1, "", "gp"], [7, 3, 1, "", "hyper_params"], [7, 4, 1, "", "ignore_warning"], [7, 3, 1, "", "kernel_"], [7, 4, 1, "", "n_tuning"], [7, 4, 1, "", "optimizer"], [7, 5, 1, "", "predict"], [7, 3, 1, "", "y_train_"]], "treeQuadrature.gaussian_process.kernel_integration": [[7, 1, 1, "", "get_length_scale"], [7, 1, 1, "", "kernel_integration"], [7, 1, 1, "", "poly_post"], [7, 1, 1, "", "rbf_mean_post"], [7, 1, 1, "", "rbf_var_post"]], "treeQuadrature.gaussian_process.kernels": [[7, 2, 1, "", "Polynomial"]], "treeQuadrature.gaussian_process.kernels.Polynomial": [[7, 5, 1, "", "clone_with_theta"], [7, 5, 1, "", "diag"], [7, 5, 1, "", "is_stationary"]], "treeQuadrature.gaussian_process.scorings": [[7, 1, 1, "", "predictive_ll"], [7, 1, 1, "", "r2"]], "treeQuadrature.gaussian_process.visualisation": [[7, 1, 1, "", "plot_gp"]], "treeQuadrature.integrators": [[8, 0, 0, "-", "base_class"], [8, 0, 0, "-", "batch_gp_integrator"], [8, 0, 0, "-", "bmc_integrator"], [8, 0, 0, "-", "distributed_gp_integrator"], [8, 0, 0, "-", "distributed_tree_integrator"], [8, 0, 0, "-", "smc_integrator"], [8, 0, 0, "-", "tree_integrator"], [8, 0, 0, "-", "vegas_integrator"]], "treeQuadrature.integrators.base_class": [[8, 2, 1, "", "Integrator"]], "treeQuadrature.integrators.batch_gp_integrator": [[8, 2, 1, "", "BatchGpIntegrator"], [8, 1, 1, "", "build_grid"], [8, 1, 1, "", "find_neighbors_grid"]], "treeQuadrature.integrators.batch_gp_integrator.BatchGpIntegrator": [[8, 5, 1, "", "fit_gps"]], "treeQuadrature.integrators.bmc_integrator": [[8, 2, 1, "", "BayesMcIntegrator"]], "treeQuadrature.integrators.distributed_gp_integrator": [[8, 2, 1, "", "DistributedGpTreeIntegrator"], [8, 1, 1, "", "individual_container_integral"]], "treeQuadrature.integrators.distributed_gp_integrator.DistributedGpTreeIntegrator": [[8, 4, 1, "", "P"], [8, 4, 1, "", "base_N"], [8, 4, 1, "", "integral"], [8, 5, 1, "", "integrate_containers"], [8, 4, 1, "", "max_container_samples"], [8, 4, 1, "", "max_iterations_per_container"], [8, 4, 1, "", "min_container_samples"], [8, 4, 1, "", "sampler"], [8, 4, 1, "", "split"]], "treeQuadrature.integrators.distributed_tree_integrator": [[8, 2, 1, "", "DistributedTreeIntegrator"], [8, 1, 1, "", "individual_container_integral"]], "treeQuadrature.integrators.distributed_tree_integrator.DistributedTreeIntegrator": [[8, 5, 1, "", "integrate_containers"]], "treeQuadrature.integrators.smc_integrator": [[8, 2, 1, "", "SmcIntegrator"]], "treeQuadrature.integrators.tree_integrator": [[8, 2, 1, "", "TreeIntegrator"], [8, 1, 1, "", "individual_container_integral"]], "treeQuadrature.integrators.tree_integrator.TreeIntegrator": [[8, 5, 1, "", "integrate_containers"]], "treeQuadrature.integrators.vegas_integrator": [[8, 2, 1, "", "ShapeAdapter"], [8, 2, 1, "", "VegasIntegrator"]], "treeQuadrature.queues": [[4, 2, 1, "", "PrioritizedItem"], [4, 2, 1, "", "PriorityQueue"], [4, 2, 1, "", "ReservoirQueue"]], "treeQuadrature.queues.PrioritizedItem": [[4, 4, 1, "", "item"], [4, 4, 1, "", "priority"]], "treeQuadrature.queues.PriorityQueue": [[4, 5, 1, "", "empty"], [4, 5, 1, "", "get"], [4, 3, 1, "", "n"], [4, 5, 1, "", "put"]], "treeQuadrature.queues.ReservoirQueue": [[4, 5, 1, "", "empty"], [4, 5, 1, "", "get"], [4, 5, 1, "", "get_probabilities"], [4, 5, 1, "", "put"]], "treeQuadrature.samplers": [[9, 0, 0, "-", "base_class"], [9, 0, 0, "-", "combined_samplers"], [9, 0, 0, "-", "importance_sampler"], [9, 0, 0, "-", "low_discrepancy_samplers"], [9, 0, 0, "-", "mcmc_sampler"], [9, 0, 0, "-", "mixed_sampler"], [9, 0, 0, "-", "stratified_sampler"], [9, 0, 0, "-", "uniform_sampler"]], "treeQuadrature.samplers.base_class": [[9, 2, 1, "", "Sampler"]], "treeQuadrature.samplers.base_class.Sampler": [[9, 5, 1, "", "handle_mins_maxs"], [9, 5, 1, "", "rvs"], [9, 5, 1, "", "subdivide_domain"]], "treeQuadrature.samplers.combined_samplers": [[9, 2, 1, "", "AdaptiveImportanceSampler"], [9, 2, 1, "", "LHSImportanceSampler"]], "treeQuadrature.samplers.combined_samplers.AdaptiveImportanceSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.combined_samplers.LHSImportanceSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.importance_sampler": [[9, 2, 1, "", "ImportanceSampler"]], "treeQuadrature.samplers.importance_sampler.ImportanceSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.low_discrepancy_samplers": [[9, 2, 1, "", "SobolSampler"]], "treeQuadrature.samplers.low_discrepancy_samplers.SobolSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.mcmc_sampler": [[9, 2, 1, "", "McmcSampler"]], "treeQuadrature.samplers.mcmc_sampler.McmcSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.mixed_sampler": [[9, 2, 1, "", "MixedSampler"]], "treeQuadrature.samplers.mixed_sampler.MixedSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.stratified_sampler": [[9, 2, 1, "", "StratifiedSampler"]], "treeQuadrature.samplers.stratified_sampler.StratifiedSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.samplers.uniform_sampler": [[9, 2, 1, "", "UniformSampler"]], "treeQuadrature.samplers.uniform_sampler.UniformSampler": [[9, 5, 1, "", "rvs"]], "treeQuadrature.splits": [[10, 0, 0, "-", "base_class"], [10, 0, 0, "-", "kd_split"], [10, 0, 0, "-", "min_sse_split"], [10, 0, 0, "-", "uniform_split"]], "treeQuadrature.splits.base_class": [[10, 2, 1, "", "Split"]], "treeQuadrature.splits.base_class.Split": [[10, 5, 1, "", "split"]], "treeQuadrature.splits.kd_split": [[10, 2, 1, "", "KdSplit"]], "treeQuadrature.splits.kd_split.KdSplit": [[10, 5, 1, "", "split"]], "treeQuadrature.splits.min_sse_split": [[10, 2, 1, "", "MinSseSplit"]], "treeQuadrature.splits.min_sse_split.MinSseSplit": [[10, 5, 1, "", "default_sse_score"], [10, 4, 1, "", "dimension_proportion"], [10, 4, 1, "", "dimension_weights"], [10, 5, 1, "", "evaluate_split"], [10, 5, 1, "", "findMinSplit"], [10, 4, 1, "", "min_samples_leaf"], [10, 4, 1, "", "scoring_function"], [10, 5, 1, "", "split"]], "treeQuadrature.splits.uniform_split": [[10, 2, 1, "", "UniformSplit"]], "treeQuadrature.splits.uniform_split.UniformSplit": [[10, 4, 1, "", "n_divisions"], [10, 5, 1, "", "split"]], "treeQuadrature.trees": [[11, 0, 0, "-", "base_class"], [11, 0, 0, "-", "limited_sample_tree"], [11, 0, 0, "-", "simple_tree"], [11, 0, 0, "-", "weighted_tree"]], "treeQuadrature.trees.base_class": [[11, 2, 1, "", "Tree"]], "treeQuadrature.trees.base_class.Tree": [[11, 5, 1, "", "construct_tree"]], "treeQuadrature.trees.limited_sample_tree": [[11, 2, 1, "", "LimitedSampleTree"]], "treeQuadrature.trees.limited_sample_tree.LimitedSampleTree": [[11, 5, 1, "", "construct_tree"]], "treeQuadrature.trees.simple_tree": [[11, 2, 1, "", "SimpleTree"]], "treeQuadrature.trees.simple_tree.SimpleTree": [[11, 5, 1, "", "construct_tree"]], "treeQuadrature.trees.weighted_tree": [[11, 2, 1, "", "WeightedTree"], [11, 1, 1, "", "default_stopping_condition"]], "treeQuadrature.trees.weighted_tree.WeightedTree": [[11, 4, 1, "", "active_N"], [11, 5, 1, "", "construct_tree"], [11, 4, 1, "", "max_splits"], [11, 4, 1, "", "n_splits"], [11, 4, 1, "", "queue"], [11, 4, 1, "", "split"], [11, 4, 1, "", "stopping_condition"], [11, 4, 1, "", "weighting_function"]], "treeQuadrature.utils": [[4, 2, 1, "", "ResultDict"], [4, 1, 1, "", "handle_bound"], [4, 1, 1, "", "scale"]], "treeQuadrature.utils.ResultDict": [[4, 5, 1, "", "setdefault"], [4, 5, 1, "", "update"]], "treeQuadrature.visualisation": [[4, 1, 1, "", "plot_container"], [4, 1, 1, "", "plot_containers"], [4, 1, 1, "", "plot_errors"], [4, 1, 1, "", "plot_integrand"], [4, 1, 1, "", "plot_times"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:property", "4": "py:attribute", "5": "py:method"}, "terms": {"": [4, 7, 9], "0": [3, 4, 5, 6, 7, 8, 9, 10, 11], "05": 8, "06": 8, "08": 7, "1": [4, 5, 6, 7, 8, 9, 10], "10": [4, 5, 6, 7, 8, 9], "100": 8, "1000": [4, 8, 11], "10000": 7, "10000000": [7, 8], "10000000000": 7, "15": [4, 5], "1d": [4, 7, 10], "1e": [7, 8, 9], "1e10": 7, "1e2": 7, "1e3": [5, 7], "1e4": 11, "2": [4, 5, 6, 7, 8, 10], "20": [5, 8], "200": [6, 8], "2000": 11, "2024": 4, "2d": [4, 6], "2left": 6, "3": [6, 7], "30": 4, "349": 3, "4": [5, 6, 9], "40": [4, 11], "5": [4, 6, 7, 8, 9], "50": 9, "500": 4, "5000": 4, "6": 6, "60": 4, "7": [5, 6], "8": [6, 7], "9": 8, "A": [4, 5, 6, 7, 8, 9, 10, 11], "For": 9, "If": [4, 5, 7, 10], "In": 4, "It": [4, 5, 7, 10], "NOT": [5, 7], "The": [4, 5, 6, 7, 8, 9, 10, 11], "To": 7, "Will": 4, "__call__": 4, "__init__": 7, "__str__": [], "_nestedsequ": 7, "_plot_containers_1d": 4, "_plot_containers_2d": 4, "_supportsarrai": 7, "a0": 6, "a_1": 6, "a_2": 6, "a_d": 6, "a_i": 6, "abc": [5, 6, 7, 8, 9, 10, 11], "abl": 8, "absolut": [4, 6], "abstract": [5, 6, 7, 8, 9, 10, 11], "accentuation_factor": 4, "accept": [4, 5, 7, 10], "access": 7, "accord": 9, "achiev": 5, "activ": 11, "active_n": [3, 4, 11], "actual": 11, "ad": 7, "adapt": [4, 5, 8, 9], "adaptiveimportancesampl": [4, 9], "adaptiverbfintegr": [4, 5], "add": [1, 4, 7], "add_sampl": 7, "addit": [4, 6, 7], "again": 5, "aggreg": 5, "algorithm": 8, "align": 10, "all": [4, 6, 8, 10, 11], "all_data": 4, "alloc": 8, "allow": [3, 4, 5, 7, 9], "along": [4, 6, 10, 11], "alpha": 7, "alpha_": [4, 7], "also": [4, 8], "altern": 7, "alwai": 7, "among": 5, "an": [3, 4, 5, 6, 7, 8], "analyt": 6, "ani": [4, 5, 6, 7, 9], "anoth": [4, 10], "answer": [3, 4, 6], "appli": [4, 9], "ar": [4, 6, 8, 10, 11], "arg": [8, 9, 11], "argument": [4, 5, 7], "arrai": [4, 6, 7, 9, 10], "arraylik": 5, "assum": [5, 6], "attempt": 7, "attribut": [5, 7], "averag": 4, "avoid": 4, "ax": 4, "axi": [4, 10], "bar": 4, "base": [4, 5, 6, 7, 8, 9, 10, 11], "base_class": [1, 4], "base_grid_scal": 8, "base_n": [3, 4, 8], "basic": 4, "batch_gp_integr": [1, 4], "batchgpintegr": [4, 8], "bayes_problem": [1, 4], "bayesmcintegr": [4, 8], "bayesproblem": [4, 6, 8], "befor": [7, 11], "behavior": 6, "being": 4, "best": [7, 10], "better": [5, 10], "between": [4, 6, 10], "beyond": 6, "bia": 9, "binari": 11, "black": 4, "bmc_integr": [1, 4], "bool": [4, 5, 7, 8, 11], "boolean": 7, "both": 10, "bound": [6, 7, 9], "boundari": [4, 7], "boundary_contain": 3, "build": [5, 8], "build_grid": [4, 8], "burn": 9, "byte": 7, "c": 7, "c0": [4, 6], "c_bar_label": 4, "calcul": [6, 7], "callabl": [4, 5, 7, 8, 9, 10, 11], "camel": [4, 6], "can": [4, 7, 11], "canva": 4, "carlo": [5, 8], "case": [4, 5, 6], "cdot": 6, "center": 6, "centr": 6, "challeng": 6, "chang": [4, 6], "check": [3, 4, 6, 7, 8, 9], "check_gp": [4, 5], "chosen": 10, "class": [4, 5, 6, 7, 8, 9, 10, 11], "classmethod": 7, "clear": 4, "clone": 7, "clone_with_theta": [4, 7], "closed_contain": 3, "clutter": 4, "co": 6, "coef0": 7, "coeff": [4, 5], "coeffici": [5, 6, 7], "color": 4, "colour": 4, "column": 4, "com": 3, "combin": [6, 9], "combined_sampl": [1, 4], "compar": 4, "compare_integr": [0, 1], "comparison": 6, "complementari": 6, "complex": 7, "complex_problem": [1, 4], "compon": 6, "comput": [6, 10], "compute_answ": [4, 6], "compute_std": 8, "condit": 7, "confid": 7, "conftest": 0, "consid": 10, "constant": 5, "constant_integr": [1, 4], "construct": [8, 11], "construct_tre": [4, 11], "constructor": 7, "cont": 8, "contain": [0, 1, 3, 5, 6, 7, 8, 10, 11], "container_integr": [1, 4, 8], "containerintegr": [4, 5, 8], "content": 1, "contour": 4, "contribut": 4, "control": [6, 7], "converg": 7, "coordin": 5, "corner": [3, 6, 9], "cornerpeak": [4, 6], "correct": 6, "correspond": [4, 6, 9, 10], "cosin": 6, "count_left": 10, "count_right": 10, "cov": [4, 6], "covari": [6, 7], "coverag": 9, "creat": [6, 7, 10], "create_kernel": [4, 7], "criteria": [8, 11], "criterion": 7, "cross": [5, 7], "csv": 4, "custom": 10, "cv": [5, 7], "d": [3, 4, 6, 7, 9], "data": [4, 7, 11], "datafram": 4, "dataset": 7, "decai": 6, "decor": 6, "def": 7, "defaulst": 4, "default": [4, 5, 6, 7, 9, 10, 11], "default_criterion": [4, 7], "default_sse_scor": [4, 10], "default_stopping_condit": [4, 11], "default_valu": 4, "defaultgpfit": 7, "defin": [6, 7, 10], "degre": [4, 5, 7], "densiti": 6, "depend": [6, 7], "design": [4, 6], "desir": 3, "detail": 4, "determin": [5, 6], "dev": 3, "deviat": [5, 7, 8], "diag": [4, 7], "diagnosi": [1, 4], "diagnost": 5, "diagon": [6, 7], "dict": [4, 5, 7, 8], "dictionari": [4, 7, 8], "differ": [4, 6], "dim": [4, 10], "dim1": 4, "dim2": 4, "dimens": [4, 6, 9, 10], "dimension": [4, 6, 9], "dimension_proport": [4, 10], "dimension_scaling_expon": 8, "dimension_weight": [4, 10], "dimensiona": 6, "discontinu": [4, 6], "discrep": 9, "displai": 4, "display_nam": 4, "dist": 6, "distribut": [1, 3, 4, 5, 8, 9], "distributed_gp_integr": [1, 4], "distributed_tree_integr": [1, 4], "distributedgptreeintegr": [4, 5, 8], "distributedtreeintegr": [4, 8], "divid": 4, "divis": 10, "do": 7, "doe": [4, 8], "domain": [6, 9], "dot": 6, "down": [5, 7], "draw": [4, 5, 7, 8, 9, 11], "draw_samples_from_contain": [4, 7], "drawn": [5, 7], "drop": 6, "dtype": 7, "dure": 10, "dx": 6, "dynam": [7, 8], "e": [4, 5, 7], "each": [3, 4, 5, 6, 7, 9, 10], "easili": 7, "ec": 4, "edg": [4, 9], "effici": 7, "egin": 6, "either": 4, "element": 4, "emce": 9, "empti": [1, 4], "empty_contain": 3, "end": 6, "ensemblesampl": 9, "ensur": [6, 7, 9], "ensure_2d_output": [4, 6], "entir": [6, 9], "epsilon": 9, "equal": [6, 10], "error": [4, 5, 10], "error_bar": 4, "error_estim": 5, "error_std": 4, "error_typ": 4, "essenti": 8, "estiamt": [], "estim": [4, 5, 7, 8], "estimate_error": [4, 5], "etc": 7, "euclidean": 6, "eval": 5, "evalu": [4, 5, 6, 7, 10], "evaluate_split": [4, 10], "exact": 6, "exact_integr": [4, 6], "exactli": 9, "exampl": [4, 7], "example_problem": [1, 4], "exampledistribut": [], "exampleproblem": [], "exce": 7, "exhibit": 6, "exp": 6, "expect": [3, 4], "expleft": 6, "exponenti": 6, "exponentialproduct": [4, 6], "ext": 6, "extend": [7, 8], "ey": 6, "f": [4, 5, 6, 7, 8, 9, 10], "factori": 7, "factr": [7, 8], "fals": [4, 5, 7, 8, 11], "fieldnam": 4, "figur": 4, "file": 4, "file_path": 4, "filenam": 4, "filename_prefix": 4, "filename_prefix_genre_error_plot": 4, "filename_prefix_genre_time_plot_integr": 4, "fill": 4, "filter": 4, "filter_point": [1, 4], "final": 7, "find": [7, 10], "find_neighbors_grid": [4, 8], "findminsplit": [4, 10], "finish": 11, "finit": 4, "first": [4, 6, 9], "fit": [4, 5, 7], "fit_gp": [1, 4, 5, 8], "fit_residu": [4, 5, 7], "fitter": [5, 7], "float": [4, 5, 6, 7, 8, 9, 10, 11], "fmin_l_bfgs_b": 7, "fo": 7, "fold": [5, 7], "follow": [4, 10], "font": 4, "font_siz": 4, "force_test_to_repeat": 3, "form": 11, "found": 10, "framework": 6, "frequenc": 6, "from": [4, 5, 6, 7, 8, 9, 10, 11], "func": 6, "function": [4, 5, 6, 7, 8, 9, 10, 11], "g": [5, 7], "gain": 8, "gaussian": [4, 5, 6, 7, 8], "gaussian_process": [1, 4, 5, 8], "gaussianprocessregressor": 7, "gener": [5, 6, 9, 10], "genr": 4, "get": [1, 4, 7], "get_length_scal": [4, 7], "get_prob": [1, 4], "github": 3, "give": [4, 11], "given": [4, 6, 7, 9, 10, 11], "good": 5, "gp": [4, 5, 7], "gp_diagnosi": [4, 7], "gp_fitter": 7, "gp_integr": [1, 4], "gp_kfoldcv": [4, 7], "gp_param": [4, 5, 7], "gp_result": 7, "gpfit": [4, 5, 7], "gpfitbas": 7, "gpregressor": 5, "greatest": 10, "grid": [4, 5, 8], "grid_siz": 8, "ha": [3, 4, 6], "hacki": 3, "handl": 6, "handle_bound": [1, 4], "handle_input": [4, 6], "handle_mins_max": [4, 9], "have": [4, 6, 8], "heat": 9, "high": [4, 6, 9], "higher": [4, 5], "hold": [4, 7, 10, 11], "howev": 7, "http": 3, "hump": 6, "hyper": [4, 5, 7, 9], "hyper_param": [4, 5, 7], "hypercub": [6, 9], "hyperparamet": 7, "i": [4, 5, 6, 7, 8, 9, 10, 11], "ident": 7, "ight": 6, "ignor": [4, 7, 8], "ignore_warn": [4, 7], "igp": [4, 5, 7], "implement": 7, "import": 9, "importance_sampl": [1, 4], "importancesampl": [4, 9], "includ": [4, 7], "increas": 5, "increment": 7, "incresa": 7, "index": 0, "indic": [4, 7, 10, 11], "individu": [4, 8], "individual_container_integr": [4, 8], "inf": 11, "iniital_sampl": 7, "initi": [5, 8, 11], "initial_sampl": 7, "initialis": 5, "input": [4, 6, 7, 10], "insid": 4, "instanc": [4, 5, 7, 10], "instanti": 7, "instead": 5, "int": [4, 5, 6, 7, 8, 9, 10, 11], "integr": [1, 3, 4, 5, 6, 7, 11], "integraiton": [], "integral_result": 8, "integrand": [4, 5, 6, 8, 9, 11], "integrate_contain": [4, 8], "integrator_inst": 3, "integrator_specific_kwarg": 4, "integrator_wrapp": [1, 4], "interv": 7, "io": 3, "is_finit": [1, 4], "is_poor_fit": [4, 7], "is_stationari": [4, 7], "issu": 3, "item": [1, 4], "iter": [4, 5, 7, 8, 11], "iterativegpfit": [4, 5, 7], "iterativegpintegr": [4, 5, 8], "iterativerbfintegr": [4, 5], "jitter": 7, "k": [4, 5, 7], "k_diag": 7, "k_tild": 7, "kd_split": [1, 4], "kdsplit": [4, 10], "keep": 5, "keep_sampl": [4, 5], "kei": [4, 8], "kerenl": 7, "kernel": [1, 4, 5, 8], "kernel_": [4, 7], "kernel_class": 7, "kernel_integr": [1, 4], "kernel_mean_post": 7, "kernel_param": 7, "kernel_post": 7, "kernel_typ": 7, "kernel_var_post": 7, "kernelfactori": [4, 7], "kernelintegr": [4, 5], "keyward": 9, "keyword": 6, "kfold": 7, "kwarg": [4, 5, 6, 7, 8, 9, 10, 11], "label": [4, 7], "lack": 4, "lambda": 7, "larg": 5, "largest": 8, "latin": 9, "leaf": 10, "left": [6, 7, 10], "length": [4, 5, 6, 7, 8, 10], "length_scal": [7, 8], "length_scale_bound": 7, "length_scaling_expon": 8, "less": 11, "level": 4, "lh": 9, "lhsimportancesampl": [4, 9], "li": 6, "like": [4, 6, 7, 10], "likelihood": [5, 6, 8], "limit": [4, 11], "limited_sample_tre": [1, 4], "limitedsampleintegr": [], "limitedsampletre": [4, 11], "line": 4, "list": [4, 5, 6, 7, 8, 9, 10, 11], "literatur": 6, "load": 4, "load_existing_result": [1, 4], "locat": 6, "log": 5, "longer": 11, "low": [4, 6, 9], "low_discrepancy_sampl": [1, 4], "lower": [4, 5, 6, 7, 9, 10], "mai": 7, "map": [4, 11], "marker": 4, "mathemat": 6, "matplotlib": 4, "matrix": [6, 7], "max": [3, 4, 6, 7, 9], "max_container_sampl": [4, 8], "max_it": [7, 8, 11], "max_iterations_per_contain": [4, 8], "max_n_sampl": 8, "max_redraw": [4, 5, 7], "max_sampl": 3, "max_samples_per_region": 9, "max_split": [3, 4, 11], "max_tim": 4, "maximum": [4, 5, 7, 8, 9, 11], "mcmc": 9, "mcmc_sampler": [1, 4], "mcmcsampler": [4, 9], "mean": [4, 5, 6, 7, 8], "measur": 7, "mechan": 11, "median": 5, "medianintegr": [4, 5], "messag": 4, "met": [7, 11], "meta": 3, "method": [4, 5, 7, 8, 9, 11], "midpoint": [1, 4, 9], "midpointintegr": [4, 5], "might": 10, "min": [3, 4, 6, 7, 9], "min_container_sampl": [4, 8], "min_samples_leaf": [4, 10], "min_sse_split": [1, 4, 11], "minim": 10, "minimis": 10, "minimum": [5, 8, 10], "minssesplit": [4, 10, 11], "mixed_sampl": [1, 4], "mixedsampl": [4, 9], "mixtur": 6, "mixturedistribut": [4, 6], "mode": [4, 6], "model": [5, 7], "modifi": 5, "modul": [0, 1], "modulu": 9, "mont": [5, 8], "monte_carlo_integr": [1, 4], "more": [3, 6, 7, 8], "mu": 6, "multimod": 6, "multipl": [3, 7, 9], "multivari": 6, "multivariatenorm": [4, 6], "must": [5, 6, 7, 10], "mutablemap": 4, "n": [1, 3, 4, 6, 7, 8, 9, 11], "n_adapt": 8, "n_dim": 7, "n_divis": [4, 10], "n_featur": 7, "n_iter": 8, "n_point": 4, "n_repeat": 4, "n_sampl": [3, 4, 5, 6, 7, 8], "n_samples_x": 7, "n_split": [4, 5, 7, 11], "n_tune": [4, 7, 8], "n_walker": 9, "name": [4, 7], "ndarrai": [4, 5, 6, 7, 8, 9, 10, 11], "necessari": [5, 7, 9], "need": 4, "new": [4, 5, 7], "new_i": 4, "new_sampl": [7, 8], "new_x": 4, "noindex": [], "none": [4, 5, 6, 7, 8, 9, 10, 11], "nor": 5, "norm": 6, "normal": 6, "note": [4, 7, 8], "noth": 4, "nove": 8, "np": [4, 5, 6, 7, 8, 9, 10, 11], "number": [4, 5, 6, 7, 8, 9, 10, 11], "numer": [4, 6, 10], "numpi": [4, 6, 7, 10], "object": [4, 5, 6, 7, 8, 10, 11], "obtain": [5, 7], "offset": 4, "one": [4, 5, 6, 7, 10], "onli": [4, 7, 8], "optim": [4, 7], "optioanl": 4, "option": [4, 5, 6, 7, 8, 9, 10, 11], "origin": 5, "oscil": 6, "oscillatori": [4, 6], "other": [4, 5, 6, 9], "otherwis": [4, 6], "our": 6, "out": 6, "output": [4, 6, 7, 11], "output_fil": 4, "outsid": 4, "over": [6, 7, 9, 10], "oversample_factor": 9, "p": [3, 4, 6, 8, 11], "packag": [0, 1], "page": 0, "pair": 6, "parallel": 8, "param_grid": 4, "paramet": [5, 7, 8, 9, 10, 11], "parametr": 3, "partial": 7, "partit": [10, 11], "pass": [4, 8], "patch": 4, "path": 4, "pattern": 6, "pd": 4, "pdf": [4, 5, 6], "peak": 6, "per": [4, 8, 9], "percentag": 4, "perform": [4, 5, 7, 8, 11], "performance_threshold": [5, 7], "perpendicular": [4, 10], "phase": 6, "pi": 6, "place": [4, 6], "plot": [4, 5, 7], "plot_absolut": 4, "plot_all_error": 4, "plot_ci": 7, "plot_contain": [1, 4], "plot_error": [1, 4], "plot_gp": [4, 7], "plot_integrand": [1, 4], "plot_sampl": 4, "plot_tim": [1, 4], "plot_titl": 4, "point": [4, 6, 7, 9, 10], "poly_post": [4, 7], "polyintegr": [4, 5], "polynomi": [4, 5, 6, 7], "pop": 11, "popul": 3, "posterior": [5, 7], "potenti": 10, "predefin": 6, "predict": [4, 5, 7], "predictive_l": [4, 7], "prefix": 4, "present": 4, "pretti": 3, "prevent": [9, 10], "previou": [5, 8], "previous_sampl": [5, 8], "print": [4, 5, 11], "prior": [5, 6, 8], "prioriti": [1, 4, 11], "prioritis": 11, "prioritizeditem": [1, 4], "priorityqueu": [1, 4], "probabl": 6, "problem": [4, 6, 7, 8], "process": [5, 7, 8], "prod_": 6, "produc": 4, "product": 6, "productpeak": [4, 6], "progress": 4, "properti": [1, 4, 7], "proport": [9, 10], "provid": [4, 5, 7], "push": 11, "put": [1, 4], "py": 5, "pyramid": [4, 6], "pytest": 3, "python": [], "quadcamel": [4, 6], "quadrat": [4, 6], "qualiti": 10, "queue": [0, 1, 3, 11], "queueintegr": [], "r": [4, 5], "r2": [4, 5, 7], "rac": 6, "random": [4, 6, 9], "randomintegr": [4, 5], "randomli": 7, "rang": [4, 5, 7, 8], "range_": 7, "rbf": [5, 7, 8], "rbf_mean_post": [4, 7], "rbf_var_post": [4, 7], "re": 7, "read_csv": 4, "recommend": 7, "rectangl": [4, 9], "rectangular": 6, "recurs": [], "redraw": 5, "redrawn": 5, "refin": 11, "region": [6, 9], "regist": 7, "register_kernel": [4, 7], "regressor": 7, "rel": 4, "repeat": 4, "repetit": 4, "repres": [4, 6, 10], "represent": [], "reproduc": 4, "request": 3, "requir": [4, 7, 10], "reservoirqueu": [1, 4, 11], "reshap": 9, "residu": [5, 7], "restart": 7, "result": [4, 5, 6, 7, 8, 10], "result_queu": 4, "resultdict": [1, 4], "retest": 4, "retest_integr": 4, "retriev": 7, "return": [4, 5, 6, 7, 8, 9, 10, 11], "return_bool": 4, "return_std": [4, 5, 7, 8], "right": 10, "rippl": [4, 6], "root": 11, "round": [5, 8], "row": [4, 6], "rtype": [4, 6, 9], "run": [4, 7], "runr": [], "runtim": 7, "rv": [1, 4, 6, 8, 9], "same": [4, 6], "same_figur": 4, "sampl": [3, 4, 5, 6, 7, 8, 9, 10, 11], "sampler": [1, 4, 5, 8], "sampling_method": 9, "save": 4, "scalar": 6, "scale": [1, 4, 5], "scaling_factor": 8, "scatter": 4, "score": [1, 4, 5, 10], "score_direct": [4, 5], "scoring_funct": [4, 10], "search": [0, 5], "second": [4, 6], "see": [3, 5], "seed": 4, "select": 10, "self": [6, 7, 9], "sequenc": 9, "set": [4, 5, 7, 10], "setdefault": [1, 4], "setup": 0, "shape": [4, 6, 7, 9], "shapeadapt": [4, 8], "share": 6, "sharp": 6, "shift": 6, "should": [4, 5, 6, 7, 8, 10, 11], "side": 10, "sigma": [6, 7], "sign": 4, "similar": 7, "simpl": [8, 11], "simple_contain": 3, "simple_problem": [1, 4], "simple_tre": [1, 4], "simplegaussian": [4, 6], "simpleintegr": [], "simpletre": [4, 11], "simulan": [], "simultan": 7, "sinc": 7, "singl": 4, "size": 4, "sklearn": [7, 8], "sklearngpfit": [4, 5, 7], "small": [7, 10], "smaller": 9, "smc_integr": [1, 4], "smcintegr": [4, 8], "so": 4, "sobol": 9, "sobolsampl": [4, 9], "solut": 6, "some": 4, "sort": 10, "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11], "space": [4, 6, 11], "specif": [4, 5, 6, 7], "specifi": [4, 6, 7, 9], "specific_kwarg": 4, "split": [1, 3, 4, 5, 7, 8, 11], "split_dimens": 4, "split_valu": 4, "spread": 6, "sqrt": 6, "squar": [5, 6, 10], "sse": 10, "stabil": 7, "stage": 9, "standard": [3, 5, 7, 8], "start": 7, "static": [9, 10], "stationari": 7, "std": [5, 7, 8], "stop": [7, 8, 11], "stopping_condit": [3, 4, 11], "store": 7, "str": [4, 5, 7, 9], "strata": 9, "strata_per_dim": 9, "stratifi": 9, "stratified_sampl": [1, 4], "stratifiedsampl": [4, 9], "string": 4, "structur": 7, "sub": [4, 10], "subclass": [5, 7, 11], "subdivid": 9, "subdivide_domain": [4, 9], "submodul": [0, 1], "subpackag": [0, 1], "sum": [6, 10], "sum_": 6, "sum_left": 10, "sum_right": 10, "sum_sq_left": 10, "sum_sq_right": 10, "take": [5, 7, 8], "taken": 4, "target": [7, 10], "temperatur": 9, "test": [0, 4, 6], "test_add_method": 3, "test_contain": 0, "test_container_integr": [1, 4], "test_distribut": 0, "test_distributedtreeintegr": 3, "test_infinite_contain": 3, "test_init": 3, "test_init_rectangl": 3, "test_integr": [0, 1, 4], "test_integrator_performance_with_param": [1, 4], "test_io": 3, "test_limitedsampleintegr": 3, "test_queueintegr": 3, "test_return_std": 3, "test_rvs_method": 3, "test_shap": 3, "test_simpleintegr": 3, "test_split_method": 3, "test_treeintegrator_io": 3, "test_uniform_pdf": 3, "test_uniform_rv": 3, "test_volume_method": 3, "text": 4, "than": [6, 8, 11], "thei": 7, "them": 7, "thershold": [4, 5], "theta": 7, "thi": [4, 5, 7, 8, 10], "those": [4, 6], "though": 5, "three": [5, 7], "threshold": [4, 5, 6, 7, 10], "threshold_direct": [4, 5, 7], "through": 5, "throw": 4, "time": [4, 5, 7], "time_taken": 4, "titl": 4, "togeth": 5, "too": 5, "total": [7, 9], "toward": 9, "track": 7, "train": 7, "tree": [1, 4, 5, 8], "tree_integr": [1, 4], "treeintegr": [4, 8], "treequadratur": 3, "true": [4, 5, 6, 7, 8], "tune": 7, "tupl": [5, 7, 8, 9, 10], "two": [4, 6, 7, 9, 10], "type": [4, 5, 6, 7, 8, 9, 10, 11], "u": [4, 6], "u1": [4, 6], "u2": [4, 6], "u_1": 6, "u_2": 6, "u_d": 6, "u_i": 6, "uncertainti": 5, "under": 7, "uniform": [4, 5, 6, 9], "uniform_dist": 3, "uniform_sampl": [1, 4, 5, 8], "uniform_split": [1, 4], "uniformli": 4, "uniformsampl": [4, 5, 8, 9], "uniformsplit": [4, 10], "unit": 6, "unless": 4, "until": 7, "up": [5, 7], "updat": [1, 4, 8], "upper": [4, 6, 7, 9], "uppper": 6, "us": [3, 4, 5, 6, 7, 8, 9, 10, 11], "user": [7, 10], "util": [0, 1], "v": 4, "valid": [4, 5, 7, 10], "valu": [4, 5, 6, 7, 8, 9, 10], "var_post": 7, "vari": [4, 6], "varianc": [5, 7, 10], "variat": 6, "vector": 6, "vega": 8, "vegas_integr": [1, 4], "vegasintegr": [4, 8], "verbos": [4, 8, 11], "veri": 10, "version": [5, 9], "visual": 4, "visualis": [0, 1], "volum": [1, 3, 4, 5], "voxel": 10, "warn": [4, 7], "weight": [4, 6, 10, 11], "weighted_tre": [1, 4], "weightedtre": [4, 11], "weighting_funct": [3, 4, 11], "well": [4, 10], "were": 7, "when": [4, 5, 7, 8, 9, 11], "where": [4, 5, 6, 10, 11], "whether": [4, 5, 7, 8, 11], "which": [4, 5, 6, 8, 9, 10], "within": 4, "without": 4, "work": 8, "wrapper": 8, "write_head": 4, "write_result": [1, 4], "x": [1, 3, 4, 5, 6, 7, 9, 10], "x_1": 6, "x_2": 6, "x_d": 6, "x_i": 6, "x_train_": [4, 7], "xlim": 4, "xs_train": 7, "y": [1, 4, 5, 7, 9, 10], "y_lim": 4, "y_mean": 7, "y_pred": 7, "y_train_": [4, 7], "y_true": 7, "ylim": 4, "ylorrd": 4, "you": 7, "your": [4, 7], "your_data": 4, "ys_pred": 7, "ys_train": 7, "zero": 6}, "titles": ["Welcome to treeQuadrature\u2019s documentation!", "treeQuadrature", "setup module", "tests package", "treeQuadrature package", "treeQuadrature.container_integrators package", "treeQuadrature.example_problems package", "treeQuadrature.gaussian_process package", "treeQuadrature.integrators package", "treeQuadrature.samplers package", "treeQuadrature.splits package", "treeQuadrature.trees package"], "titleterms": {"": 0, "arg": 6, "argument": [6, 9], "attribtu": 6, "attribut": 4, "base_class": [5, 6, 8, 9, 10, 11], "batch_gp_integr": 8, "bayes_problem": 6, "bmc_integr": 8, "combined_sampl": 9, "compare_integr": 4, "complex_problem": 6, "conftest": 3, "constant_integr": 5, "contain": 4, "container_integr": 5, "containerintegr": [], "content": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11], "diagnosi": 7, "distribut": 6, "distributed_gp_integr": 8, "distributed_tree_integr": 8, "document": 0, "example_problem": 6, "exampledistribut": [], "exampleproblem": [], "fit_gp": 7, "gaussian_process": 7, "gp_integr": 5, "importance_sampl": 9, "indic": 0, "integr": 8, "kd_split": 10, "kdsplit": [], "kernel": 7, "kernel_integr": 7, "limited_sample_tre": 11, "limitedsampleintegr": [], "low_discrepancy_sampl": 9, "mcmc_sampler": 9, "min_sse_split": 10, "minssesplit": [], "mixed_sampl": 9, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "monte_carlo_integr": 5, "packag": [3, 4, 5, 6, 7, 8, 9, 10, 11], "paramet": [4, 6], "queue": 4, "queueintegr": [], "sampler": 9, "score": 7, "setup": 2, "simple_problem": 6, "simple_tre": 11, "simpleintegr": [], "smc_integr": 8, "smcintegr": [], "split": 10, "stratified_sampl": 9, "submodul": [3, 4, 5, 6, 7, 8, 9, 10, 11], "subpackag": 4, "tabl": 0, "test": 3, "test_contain": 3, "test_distribut": 3, "test_integr": 3, "tree": 11, "tree_integr": 8, "treequadratur": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11], "uniform_sampl": 9, "uniform_split": 10, "uniformsplit": [], "usag": 4, "util": 4, "vegas_integr": 8, "vegasintegr": [], "visualis": [4, 7], "weighted_tre": 11, "welcom": 0}})