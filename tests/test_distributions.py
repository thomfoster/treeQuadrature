import pytest
import treeQuadrature as tq
import numpy as np
from functools import partial

@pytest.mark.parametrize("D", [1,2])
@pytest.mark.parametrize("n_samples", [0,1,10])
@pytest.mark.parametrize("distribution", [
    partial(tq.distributions.Uniform, low=-1.0, high=1.0),
    tq.distributions.Camel,
    tq.distributions.QuadCamel
])
def test_shapes(D, n_samples, distribution):
    d = distribution(D)

    X = d.rvs(n_samples)
    assert X.ndim == 2
    assert X.shape[0] == n_samples
    assert X.shape[1] == D

    y = d.pdf(X)
    assert y.ndim == 2
    assert y.shape[0] == n_samples
    assert y.shape[1] == 1

@pytest.fixture(params=[1, 2, 5])
def uniform_dist(request):
    D = request.param  # Dimension
    low = -1.0
    high = 1.0
    return tq.distributions.Uniform(D=D, low=low, high=high)

def test_uniform_pdf(uniform_dist):
    # Generate random samples within the bounds
    X_within_bounds = np.random.uniform(low=uniform_dist.low, 
                                        high=uniform_dist.high, 
                                        size=(100, uniform_dist.D))
    pdf_values_within_bounds = uniform_dist.pdf(X_within_bounds)

    # Check that the PDF values are correct
    expected_value = 1 / (2 ** uniform_dist.D)
    assert np.all(pdf_values_within_bounds == expected_value), (
        f"Expected {expected_value}, but got {pdf_values_within_bounds}"
    )

    # Generate random samples outside the bounds
    X_above = np.random.uniform(low=uniform_dist.high + 1, high=uniform_dist.high + 2, 
                                size=(50, uniform_dist.D))
    X_below = np.random.uniform(low=uniform_dist.low - 2, high=uniform_dist.low - 1, 
                                size=(50, uniform_dist.D))
    X_outside_bounds = np.vstack((X_below, X_above))
    pdf_values_outside_bounds = uniform_dist.pdf(X_outside_bounds)

    # Check that the PDF values are zero for points outside the bounds
    assert np.all(pdf_values_outside_bounds == 0), (
        f"Expected 0, but got {pdf_values_outside_bounds}"
    )

def test_uniform_rvs(uniform_dist):
    # Generate random samples
    n_samples = 1000
    samples = uniform_dist.rvs(n_samples)

    # Check that all samples are within the specified range
    assert np.all(samples >= uniform_dist.low) and np.all(samples <= uniform_dist.high), (
        "Some samples generated by rvs are out of the specified bounds."
    )